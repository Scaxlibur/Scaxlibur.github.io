const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":101,\"nextId\":101,\"documentIds\":{\"0\":\"0\",\"1\":\"0#为什么写博客\",\"2\":\"0#我准备写什么\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3#前言\",\"6\":\"3#正文\",\"7\":\"3#封装与抽象\",\"8\":\"3#什么是封装\",\"9\":\"3#为什么要封装\",\"10\":\"3#上述内容在c中都可以通过头文件实现-为什么还要c\",\"11\":\"3#以笔者的项目为例\",\"12\":\"3#重载\",\"13\":\"3#写了这么多-应该怎么应用呢\",\"14\":\"3#别人是怎么在嵌入式开发中应用面向对象的设计方法的\",\"15\":\"3#后记\",\"16\":\"3#参考\",\"17\":\"3@0\",\"18\":\"3@1\",\"19\":\"4\",\"20\":\"4#前言\",\"21\":\"4#正文\",\"22\":\"4#写在前面\",\"23\":\"4#计时器配置\",\"24\":\"4#时钟源配置\",\"25\":\"4#计时器计数方向\",\"26\":\"4#计时器嘀嗒频率配置\",\"27\":\"4#设置中断的优先级\",\"28\":\"4#其他配置\",\"29\":\"4#计时器实例化\",\"30\":\"4#设置计时器警报动作\",\"31\":\"4#计时器警报配置\",\"32\":\"4#计时器警报实例化\",\"33\":\"4#注册事件回调函数\",\"34\":\"4#配置回调函数\",\"35\":\"4#注册回调函数\",\"36\":\"4#使能计时器\",\"37\":\"4#启动计时器\",\"38\":\"4#参考\",\"39\":\"4@0\",\"40\":\"4@1\",\"41\":\"5\",\"42\":\"5#前言\",\"43\":\"5#正文\",\"44\":\"5#uart配置\",\"45\":\"5#设置通信参数\",\"46\":\"5#设置通信管脚\",\"47\":\"5#安装驱动程序\",\"48\":\"5#uart收发操作\",\"49\":\"5#uart发送\",\"50\":\"5#uart接收\",\"51\":\"5#单线串口收发干扰的解决\",\"52\":\"5#总线舵机作为对象\",\"53\":\"5#参考\",\"54\":\"5@0\",\"55\":\"5@1\",\"56\":\"6\",\"57\":\"6#_1-什么是freertos\",\"58\":\"6#_2-为什么学习freertos\",\"59\":\"6#参考\",\"60\":\"6@0\",\"61\":\"6@1\",\"62\":\"7\",\"63\":\"7#为什么用docker\",\"64\":\"7#影视服务器-jellyfin\",\"65\":\"7#个人导航-heimdall\",\"66\":\"7@0\",\"67\":\"7@1\",\"68\":\"8\",\"69\":\"8#cpu和主板的选择\",\"70\":\"8#核显\",\"71\":\"8#板载网卡\",\"72\":\"8#硬盘数量\",\"73\":\"8#性能与功耗\",\"74\":\"8#硬盘的选择\",\"75\":\"8#电源的选择\",\"76\":\"8#机箱的选择\",\"77\":\"8@0\",\"78\":\"8@1\",\"79\":\"9\",\"80\":\"10\",\"81\":\"10#什么是软路由\",\"82\":\"10#软路由能做什么\",\"83\":\"10#软路由的实现方式\",\"84\":\"10#软路由需要怎样的配置\",\"85\":\"10#软路由需要什么软件\",\"86\":\"10@0\",\"87\":\"10@1\",\"88\":\"11\",\"89\":\"11#lucky反向代理\",\"90\":\"11#sqm-qos\",\"91\":\"11#最后\",\"92\":\"11@0\",\"93\":\"11@1\",\"94\":\"12\",\"95\":\"13\",\"96\":\"14\",\"97\":\"15\",\"98\":\"16\",\"99\":\"17\",\"100\":\"18\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,4],\"1\":[2,22],\"2\":[2,34],\"3\":[1,22],\"4\":[1],\"5\":[1,17],\"6\":[1],\"7\":[1],\"8\":[2,38],\"9\":[2,12],\"10\":[3,17],\"11\":[1,183],\"12\":[1,43],\"13\":[3,5],\"14\":[2,16],\"15\":[1,11],\"16\":[1,6],\"17\":[null,null,1],\"18\":[null,null,3],\"19\":[1],\"20\":[1,4],\"21\":[1],\"22\":[1,32],\"23\":[1,28],\"24\":[1,16],\"25\":[1,11],\"26\":[1,17],\"27\":[1,9],\"28\":[1,6],\"29\":[1,38],\"30\":[1],\"31\":[1,36],\"32\":[1,19],\"33\":[1,7],\"34\":[1,52],\"35\":[1,23],\"36\":[1,20],\"37\":[1,16],\"38\":[1,3],\"39\":[null,null,2],\"40\":[null,null,2],\"41\":[1],\"42\":[1,15],\"43\":[1],\"44\":[1,33],\"45\":[1,63],\"46\":[1,34],\"47\":[1,46],\"48\":[1,29],\"49\":[1,21],\"50\":[1,41],\"51\":[1,33],\"52\":[1,92],\"53\":[1,6],\"54\":[null,null,3],\"55\":[null,null,3],\"56\":[1],\"57\":[3,19],\"58\":[3,60],\"59\":[1,4],\"60\":[null,null,2],\"61\":[null,null,3],\"62\":[1],\"63\":[2,23],\"64\":[2,19],\"65\":[2,20],\"66\":[null,null,1],\"67\":[null,null,1],\"68\":[1],\"69\":[1,37],\"70\":[1,14],\"71\":[1,18],\"72\":[1,10],\"73\":[1,10],\"74\":[1],\"75\":[1],\"76\":[1],\"77\":[null,null,1],\"78\":[null,null,1],\"79\":[1,11],\"80\":[1],\"81\":[2,21],\"82\":[2,12],\"83\":[1,34],\"84\":[2,45],\"85\":[2,16],\"86\":[null,null,1],\"87\":[null,null,1],\"88\":[1],\"89\":[1,13],\"90\":[2,42],\"91\":[1,4],\"92\":[null,null,1],\"93\":[null,null,1],\"94\":[1,11],\"95\":[1,3],\"96\":[1],\"97\":[1],\"98\":[2],\"99\":[2],\"100\":[2]},\"averageFieldLength\":[1.2970520416430187,25.625288485524518,0.5134186778145758],\"storedFields\":{\"0\":{\"h\":\"Scaxlibur 开源博客\",\"t\":[\"我喜欢写作，也喜欢分享，所以创建了这个博客。\"]},\"1\":{\"h\":\"为什么写博客？\",\"t\":[\"在这个博客创建的2024年，依附于各种平台的自媒体大行其道，个人搭建博客早已是明日黄花。但我热爱探索新的技术，不愿囿于前人的探索路径，所以我选择利用个人博客发表自己学习的心得与见解。\",\"此外，我不喜欢视频教程，因为我总觉得视频教程的信息密度低，难以勾起我的兴趣。不知道是否出于个人原因，我在观看视频教程时容易走神，看着看着就不知道作者讲到哪儿了。大部分文字教程都发布于个人博客，所以我也仿照前人的方式，一字一句记下学习的路途，供后来者参考。\",\"“负箧曳徙，行深山巨谷中。”这是我的座右铭，我想这就是我日常的状态。\"]},\"2\":{\"h\":\"我准备写什么？\",\"t\":[\"主要写ESP32应用心得和我在图吧当垃圾佬的经历。\",\"我的主要学习方向是嵌入式开发，再细分一些就是信号处理。在这个方向上，大多数人都使用STM32系列芯片作为主控。但在偶然间，我接触到了ESP32系列。这样一块国产的芯片给我带来了太多的惊喜，Arduino环境的支持也让我回忆起了以前使用Arduino UNO调试PID的日子。这或许就像《追忆似水年华》中的小玛德莲娜饼干，只消闻到其香味，美好的昨日记忆就在眼前徐徐展开。\",\"有人可能说ESP32性能孱弱，难堪大任。但我相信ESP32-S3凭借丰富的外设和240MHz的主频也能挑起大梁。更何况，更高性能的实时处理，还有FPGA负责嘛。\",\"至于捡垃圾这方面，那就是我的那台E3服务器和黑群晖NAS了。这俩哥们现在都挺稳定的，最长连续工作时间可以达到120天以上。但实际上究竟有多长我并没有测试过，但至今为止的关机都是因为折腾导致的，比如更新系统、添加硬件之类的。这俩哥们从初中就开始陪伴我，我也算是积攒了和它们相处的经验，所以写出来供参考😋。\"]},\"3\":{\"h\":\"个人介绍\",\"t\":[\"负箧曳屣，行深山巨谷中。\",\"Hey，我是Scaxlibur，正在学习嵌入式开发，主要方向是信号处理和物联网技术，想当一名嵌入式开发工程师。\",\"工作、学习之余，我还是一个图吧垃圾佬。有两台自用的服务器，虽然功耗稍高，但成就感十足。但是有一台自己的服务器真的很方便！诸如docker之类的服务都可以自己托管，想折腾物联网项目时也可以用自建服务器，免去了求人之苦和云服务器价格高昂的烦恼。\",\"同时，我也非常喜欢研究计算机网络，上述的其中一台服务器被我用来搭建软路由，研究研究高可用路由系统也是不错的消遣😋。\"]},\"4\":{\"h\":\"C++嵌入式开发入门\"},\"5\":{\"h\":\"前言\",\"t\":[\"C++大体上与C类似，是一门广泛应用的嵌入式开发语言。但因其支持面向对象特性，在嵌入式开发的部分领域，尤其是复杂系统的构建中更具优势。本文将以ESP-IDF为例，简要介绍C++的封装与多态在嵌入式开发中的应用。\",\"本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1\",\"本文的例子来源于AS608指纹模块在ESP-IDF环境下的驱动\"]},\"6\":{\"h\":\"正文\"},\"7\":{\"h\":\"封装与抽象\"},\"8\":{\"h\":\"什么是封装？\",\"t\":[\"封装是面向对象编程中的把数据和操作数据的函数绑定在一起的一个概念，这样能避免受到外界的干扰和误用，从而确保了安全。\",\"数据封装是一种把数据和操作数据的函数捆绑在一起的机制，数据抽象是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。\",\"C++ 通过创建类来支持封装。类用于指定对象的形式，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合。类中的数据称为成员变量，函数称为成员函数。类可以被看作是一种模板，可以用来创建具有相同属性和行为的多个对象。\",\"举一个现实生活中的真实例子，比如一台电视机，可以打开和关闭、切换频道、调整音量、添加外部组件（如音响、录像机、DVD 播放器），但是我们不知道它的内部实现细节，也就是说，我们并不知道其如何通过缆线接收信号，如何转换信号，并最终显示在屏幕上。\",\"这样，我们就可以说电视分开了其内部实现和外部接口，我们无需知道其内部实现原理，直接通过外部接口（如遥控器）就可以操控电视。就C++而言，C++为数据抽象提供了可能。\"]},\"9\":{\"h\":\"为什么要封装？\",\"t\":[\"数据抽象有两个重要的优势：\",\"类的内部受到保护，不会因无意的用户级错误导致对象状态受损。\",\"类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误。\",\"如果只在类的私有部分定义数据成员，编写该类的作者就可以随意更改数据。如果实现发生改变，则只需要检查类的代码，看看这个改变会导致哪些影响。\"]},\"10\":{\"h\":\"上述内容在C中都可以通过头文件实现，为什么还要C++？\",\"t\":[\"在C语言中，可使用名称相同的.c和.h文件代表一个硬件部件、规则协议或者外设。\",\"C++使用访问标签管理权限，即把类的成员分为了两个部分：可被外部直接访问和不可被外部直接访问。访问标签使得抽象是强制的，如果在其他部分调用类中的私有成员，编译器会抛出错误。\",\"C的头文件中也可以通过程序编写规范等方式实现只调用特定的接口，但这毕竟是一种非强制性的举措，如果开发人员疏忽，可能就会误调用我们不希望其调用的接口，导致程序出现错误。\"]},\"11\":{\"h\":\"以笔者的项目为例\",\"t\":[\"笔者需要在程序中调用一个使用串口通信的指纹模块，而指纹模块本身具有多种功能，如初始化、校验密钥、对比指纹库等。但笔者调用时并不关心其内部实现，而只需要让指纹模块完成其该完成的动作，如添加指纹、刷指纹、删除指纹等。这样一来，我们就能把注意力从底层逻辑的实现转向模块与模块之间的配合，节省了大量的精力，便于我们管理大型项目。\",\"上文提到，笔者使用类将指纹模块封装为一个对象，使用private权限封装内部变量和函数；使用public权限暴露指纹模块对外接口。这样一来，我们就只需要关心怎么”用“而非”怎么实现“。\",\"class IDENTIFIER { private: uint32_t IDaddr = 0XFFFFFFFF; uint32_t IDpwd = 0x00000000; //口令验证 typedef struct { uint16_t pageID; //指纹ID uint16_t mathscore; //匹配得分 }SearchResult; typedef struct { uint16_t PS_max; //指纹最大容量 uint8_t PS_level; //安全等级 uint32_t PS_addr; uint8_t PS_size; //通讯数据包大小 uint8_t PS_N; //波特率基数N }SysPara; void SendHead(void); void SendAddr(void); void SendFlag(uint8_t flag); void SendLength(uint16_t length); void Sendcmd(uint8_t cmd); void SendCheck(uint16_t check); uint8_t *JudgeStr(); //判断中断接收的数组有没有应答包 bool AS608_Check(void); //连接检查 uint8_t PS_GetImage(void); //录入图像 uint8_t PS_GenChar(uint8_t BufferID); //生成特征 uint8_t PS_Match(void); //精确比对两枚指纹特征 uint8_t PS_Search(uint8_t BufferID,uint16_t StartPage,uint16_t PageNum,SearchResult *p); //搜索指纹 uint8_t PS_RegModel(void); //合并特征（生成模板） uint8_t PS_StoreChar(uint8_t BufferID,uint16_t PageID); //储存模板 uint8_t PS_DeletChar(uint16_t PageID,uint16_t N); //删除模板 uint8_t PS_Empty(void); //清空指纹库 uint8_t PS_WriteReg(uint8_t RegNum,uint8_t DATA); //写系统寄存器 uint8_t PS_ReadSysPara(SysPara *p); //读系统基本参数 uint8_t PS_SetAddr(uint32_t addr); //设置模块地址 uint8_t PS_WriteNotepad(uint8_t NotePageNum,uint8_t *content); //写记事本 uint8_t PS_ReadNotepad(uint8_t NotePageNum,uint8_t *note); //读记事 uint8_t PS_HighSpeedSearch(uint8_t BufferID,uint16_t StartPage,uint16_t PageNum,SearchResult *p); //高速搜索 uint8_t PS_ValidTempleteNum(uint16_t *ValidN); //读有效模板个数 uint8_t PS_HandShake(uint32_t *PS_Addr); //与AS608模块握手 uint32_t PS_GetRandomCode(); //让模块发送一个随机数 const char *EnsureMessage(uint8_t ensure); //确认码错误信息解析 void ShowErrMessage(uint8_t ensure); public: IDENTIFIER(); //构造函数，相当于对象初始化 ~IDENTIFIER(); //析构函数，对象销毁时用于回收资源 void Add_FR(void); //添加指纹 void press_FR(void); //刷指纹 void Del_FR(void); //删除指纹 void Del_FR_Lib(void); //删除所有指纹 };\",\"可见，指纹模块对外暴露的接口只有四个函数，还有构造与析构函数。这样，调用时只需要在四个函数中选择，实现了程序的解耦合，让程序易读。\",\"此外，构造函数在初始化对象时自动被调用，可以用于一些初始值和初始配置的设置，如注册UART资源等。析构函数在对象被销毁时自动调用，用于回收相对应的系统资源。但由于嵌入式开发中，绝大多数对象一经调用就永不销毁，所以用到析构函数的情况很少。\",\"下面是这个类被实例化为对象的具体案例：\",\"void IDtask(void *arg) { IDENTIFIER identifier; //创建指纹识别器对象,也就是对象的实例化 identifier.Add_FR(); while (1) { identifier.press_FR(); #ifdef TEST //测试用，如果宏定义了TEST，就会执行printf printf(\\\"\\\\nIDtask任务调用\\\\n\\\"); #endif vTaskDelay(5000/portTICK_PERIOD_MS); } }\",\"对象一经实例化，我们就可以调用其对外暴露的接口了。如identifier.Add_FR( )。然而，如果我们尝试在这个函数中调用identifier.IDaddr，无论是读或写，都会导致编译器编译失败。\"]},\"12\":{\"h\":\"重载\",\"t\":[\"重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。\",\"当调用一个重载函数或重载运算符时，编译器通过比较所使用的参数类型与定义中的参数类型，决定选用最合适的定义。\",\"没看懂？举个例子吧。以下是笔者通过串口发送信息的三个函数，分别用于发送8位、16位和32位数据。\",\"void IDUARTwrite_Bytes(uint8_t data); void IDUARTwrite_Bytes(uint16_t data); void IDUARTwrite_Bytes(uint32_t data);\",\"这三个函数的具体实现也不同：\",\"void IDUARTwrite_Bytes(uint8_t data) { uart_write_bytes(UART_NUM_ID, &data, 1); } void IDUARTwrite_Bytes(uint16_t data) { uint8_t data1 = data >> 8; uart_write_bytes(UART_NUM_ID, &data1, 1); uart_write_bytes(UART_NUM_ID, &data, 1); } void IDUARTwrite_Bytes(uint32_t data) { uint8_t data1 = data >> 24; uint8_t data2 = data >> 16; uint8_t data3 = data >> 8; uart_write_bytes(UART_NUM_ID, &data1, 1); uart_write_bytes(UART_NUM_ID, &data2, 1); uart_write_bytes(UART_NUM_ID, &data3, 1); uart_write_bytes(UART_NUM_ID, &data, 1); }\",\"那么编译器在编译时如何区分名字相同的函数呢？答案就是函数传入参数的类型和顺序。这样，我们就可以让编译器通过函数的传入参数自动区分需要调用的函数，以此实现程序的简化，可读性更强。\"]},\"13\":{\"h\":\"写了这么多，应该怎么应用呢？\",\"t\":[\"以下是笔者的项目结构，按从功能到实现的顺序画的思维导图：\",\"（可以拖动，不妨尝试一下）\"]},\"14\":{\"h\":\"别人是怎么在嵌入式开发中应用面向对象的设计方法的？\",\"t\":[\"笔者在知网找到一篇文章：《面向对象编程方法在Cotex－M3内核芯片程序开发中的应用》。这篇文章以一款自动校时电子钟项目为例，讲了讲如何在嵌入式环境中使用面向对象的编程思想。总的来说，作者首先把各种硬件通信协议单独列出，形成通信类，再把与功能有关的应用聚合成功能类。因为通信协议都是标准的，所以在与通信协议有关的程序编写完成后，其他应用可以复用这些通信模块。作者写得比较细，连通信协议的方法声明都写到文章里了，值得一看。\"]},\"15\":{\"h\":\"后记\",\"t\":[\"C++的面向对象特性还有很多，如虚函数、类的继承等。但由于嵌入式开发有时并不需要这么多的特性，所以本文暂且按下不表，后续笔者用到时会再写一篇。\",\"此外，C++有些功能需要在运行时进行操作，这对单片机而言可能会是较大的开销，因此笔者不建议使用C++的运行时特性。\"]},\"16\":{\"h\":\"参考\",\"t\":[\"C++ 数据封装——菜鸟教程\",\"《面向对象编程方法在Cotex－M3内核芯片程序开发中的应用》\"]},\"17\":{\"c\":[\"嵌入式开发\"]},\"18\":{\"c\":[\"ESP32\",\"嵌入式开发\",\"面向对象的程序设计\"]},\"19\":{\"h\":\"ESP32计时器\"},\"20\":{\"h\":\"前言\",\"t\":[\"ESP-IDF利用结构体进行各种配置，计时器的配置是一个典型案例。\"]},\"21\":{\"h\":\"正文\"},\"22\":{\"h\":\"写在前面\",\"t\":[\"计时器的定义本文不再赘述。本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1\",\"ESP32-S3的计时器从无到有共三种状态，即：init -> enable -> run\",\"计时器通常在以下场景中使用：\",\"如同挂钟一般自由运行，随时随地获取高分辨率时间戳；\",\"生成周期性警报，定期触发事件；\",\"生成一次性警报，在目标时间内响应。\",\"本文的应用场景是第二种。本文所用的示例来自于ESP32-S3用于并口DAC通信的测试\",\"ESP-IDF多使用结构体的方式进行配置，计时器也不例外。ESP-IDF的驱动层高度抽象，因此使用计时器时无需考虑硬件所属的计时器组和计时器，这些均由后台驱动程序管理。\"]},\"23\":{\"h\":\"计时器配置\",\"t\":[\"gptimer_config_t waveCounterTimer_config = { .clk_src = GPTIMER_CLK_SRC_APB, // 时钟源,APB时钟最快不超过80MHz .direction = GPTIMER_COUNT_UP, // 计时器计数方向 .resolution_hz = TIME_CLOCK_HZ, // 计时器嘀嗒频率配置 .intr_priority = 0, // 中断优先级 };\",\"下面一一解释各项参数\"]},\"24\":{\"h\":\"时钟源配置\",\"t\":[\".clk_src = GPTIMER_CLK_SRC_APB\",\"一般使用APB时钟，频率最快可以到80MHz。\",\"还可以选择晶振作为时钟，即.clk_src = GPTIMER_CLK_SRC_XTAL\",\"不同的时钟源对功耗有所影响，但由于示例并非功率敏感，因此笔者并未就具体的影响进行探索。\"]},\"25\":{\"h\":\"计时器计数方向\",\"t\":[\".direction = GPTIMER_COUNT_UP\",\"计时器无非就是递增或者递减，本例使用了递增计数\",\"如果要使用递减计数，那就配置为.direction = GPTIMER_COUNT_DOWN\"]},\"26\":{\"h\":\"计时器嘀嗒频率配置\",\"t\":[\"​ .resolution_hz = TIME_CLOCK_HZ\",\"设置内部计时器器的分辨率。计数器每滴答一次相当于 1 / resolution_hz 秒。TIME_CLOCK_HZ是笔者的宏定义。\",\"事实上，这相当于变相配置了预分频器。但值得注意的是，预分频器的最小分频系数为2，即计时器频率的最大值为40MHz\"]},\"27\":{\"h\":\"设置中断的优先级\",\"t\":[\".intr_priority = 0\",\"设置中断的优先级。如果设置为 0，则会分配一个默认优先级的中断，否则会使用指定的优先级\"]},\"28\":{\"h\":\"其他配置\",\"t\":[\"以上是本例中用到的中断配置，但ESP-IDF编程指南还给出了其他配置，即驱动程序是否允许系统在睡眠模式下关闭电源和是否将计时器中断标记为共享源，可能对读者有所帮助。\"]},\"29\":{\"h\":\"计时器实例化\",\"t\":[\"简而言之，实例化就是一种注册，即通知系统分配资源给上文所配置的计时器。注意：计时器此时还未开启\",\"gptimer_handle_t waveCounterTimer_handle = NULL; ESP_ERROR_CHECK(gptimer_new_timer(&waveCounterTimer_config, &waveCounterTimer_handle))\",\"首先，我们需要使用gptimer_handle_t创建一个计时器句柄，方便我们操作计时器。笔者把句柄理解为指针，故初始化为NULL。\",\"随后，利用函数gptimer_new_timer（const gptimer_config_t *config, gptimer_handle_t *ret_timer）实例化计时器，简而言之，第一个参数传入上文配置好的计时器配置结构体，第二个参数传入计时器句柄。\",\"最后，使用ESP-IDF的ESP_ERROR_CHECK（）进行检查，使出现计时器资源不足等错误时能及时报错。不用该函数也可以进行配置，但可能为debug带来不便。\"]},\"30\":{\"h\":\"设置计时器警报动作\"},\"31\":{\"h\":\"计时器警报配置\",\"t\":[\"所谓的警报动作，就是让计时器计数到某个值时产生警报事件，提醒CPU处理相应的事件。生活中，我们使用闹钟提醒我们按时起床，道理是一样的。\",\"和计时器本身的配置一样，计时器的警报动作也需要使用结构体进行配置，例子的配置如下。\",\"gptimer_alarm_config_t waveCounterTimer_alarm_config = { .alarm_count = 10, // 到达这个数时警报 .reload_count = 1, // 重载的数值 .flags = { .auto_reload_on_alarm = true, // 是否自动重载 } };\",\".alarm_count设置警报事件的计数值，到达这个数就会警报。但要注意计时器本身的计数方向。\",\".reload_count设置警报事件的重载值，如果启用下面的.auto_reload_on_alarm，那么一旦计数器警报，计数器就会自动重载到.reload_count配置的值。\",\".auto_reload_on_alarm配置计时器是否自动重载。\"]},\"32\":{\"h\":\"计时器警报实例化\",\"t\":[\"`ESP_ERROR_CHECK(gptimer_set_alarm_action(waveCounterTimer_handle, &waveCounterTimer_alarm_config));`\",\"调用gptimer_set_alarm_action(gptimer_handle_t timer, const gptimer_alarm_config_t *config)实例化计时器警报，第一个参数传入上文提到的计时器句柄，第二个参数传入刚刚配置的计时器警报结构体。\"]},\"33\":{\"h\":\"注册事件回调函数\",\"t\":[\"计时器启动后，可动态产生特定事件（如“警报事件”）。如需在事件发生时调用某些函数，就需要通过注册事件回调函数。\"]},\"34\":{\"h\":\"配置回调函数\",\"t\":[\"ESP-IDF支持的回调函数格式如下，必须为布尔值，而且传入变量也必须和下文一致。由于此函数在 ISR 上下文中调用，必须确保该函数不会试图阻塞。\",\"bool wave_alarm_cb_t(gptimer_handle_t timer, const gptimer_alarm_event_data_t *edata, void *user_ctx) { if (waveindex >= SAMPLE_PER_CYCLE) { waveindex = 0; } waveindex += wave_index_step; return true; }\",\"其中，回调函数的第一个参数为计时器的句柄；第二个参数为计时器警报数据，由驱动传入；第三个参数为用户自定义的传入上下文，由gptimer_register_event_callbacks()提供。\",\"紧接着，就要配置一个回调函数结构体，格式如下\",\" const gptimer_event_callbacks_t cbs = { .on_alarm = wave_alarm_cb_t // 回调函数的函数名 };\"]},\"35\":{\"h\":\"注册回调函数\",\"t\":[\"ESP_ERROR_CHECK(gptimer_register_event_callbacks(waveCounterTimer_handle, &cbs, NULL));\",\"通过gptimer_register_event_callbacks(gptimer_handle_t timer, const gptimer_event_callbacks_t *cbs, void *user_data)注册回调函数，第一个参数是配置时钟的句柄地址，第二个是回调函数结构体的地址，第三个是传递给回调函数的上下文。\"]},\"36\":{\"h\":\"使能计时器\",\"t\":[\"ESP_ERROR_CHECK(gptimer_enable(waveCounterTimer_handle));\",\"在对计时器进行 IO 控制之前，需要先调用gptimer_enable(gptimer_handle_t timer)使能计时器，传入计时器句柄，将计时器从init状态切换为enable状态，这样，相应的中断服务会一并使能，时钟的电源管理锁也会启动。\"]},\"37\":{\"h\":\"启动计时器\",\"t\":[\"ESP_ERROR_CHECK(gptimer_start(waveCounterTimer_handle));\",\"大功告成，一切准备就绪！调用gptimer_start(gptimer_handle_t timer)启动计时器，将计时器从enable状态切换为start状态，使计时器开始工作。\"]},\"38\":{\"h\":\"参考\",\"t\":[\"ESP-IDF编程指南——通用计时器\"]},\"39\":{\"c\":[\"ESP32\",\"嵌入式开发\"]},\"40\":{\"c\":[\"ESP32\",\"嵌入式开发\"]},\"41\":{\"h\":\"总线舵机\"},\"42\":{\"h\":\"前言\",\"t\":[\"总线舵机是一种利用UART总线进行控制的舵机。笔者购买的总线舵机使用单线UART总线，即TX与RX在同一条线上。有的文章指出这样的设计会产生冲突，但笔者猜测如果总线上只有总线舵机，干扰可以通过软件方法解决。\",\"本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1\",\"本文的例子来源于基于ESP32-S3的高安全性宿舍智能门锁设计\"]},\"43\":{\"h\":\"正文\"},\"44\":{\"h\":\"UART配置\",\"t\":[\"ESP-IDF配置UART的步骤分为以下几步：\",\"设置通信参数 - 设置波特率、数据位、停止位等\",\"设置通信管脚 - 分配连接设备的管脚\",\"安装驱动程序 - 为 UART 驱动程序分配资源\",\"运行 UART 通信 - 发送/接收数据\",\"使用中断 - 触发特定通信事件的中断\",\"删除驱动程序 - 如无需 UART 通信，则释放已分配的资源\",\"步骤 1 到 3 为配置阶段，步骤 4 为 UART 运行阶段，步骤 5 和 6 为可选步骤。\"]},\"45\":{\"h\":\"设置通信参数\",\"t\":[\"ESP-IDF的配置风格是使用结构体进行配置，UART配置也不例外。完整的配置结构体如下图：\",\"const uart_config_t uart2servo_config = { .baud_rate = 115200, //比特率 .data_bits = UART_DATA_8_BITS, //传输位 .parity = UART_PARITY_DISABLE, //奇偶控制 .stop_bits = UART_STOP_BITS_1, //停止位 .flow_ctrl = UART_HW_FLOWCTRL_DISABLE, //硬件流控模式 .source_clk = UART_SCLK_DEFAUL //通信模式 };\",\"随后，使用uart_param_config(uart_port_t uart_num, const uart_config_t *uart_config)注册该配置，使系统为该UART通信分配相应资源。\",\"该函数第一个传入参数为UART控制器编号，ESP32-S3有3个UART控制器，由于ESP32使用UART_NUM_0向上位机发送日志，故本例使用UART_NUM_2。UART_NUM_SERVO是指向UART_NUM_2的宏定义。\",\"ESP_ERROR_CHECK(uart_param_config(UART_NUM_SERVO, &uart2servo_config));\",\"笔者强烈建议在调用注册函数时同时调用ESP_ERROR_CHECK()，该函数可以在操作失败时及时报错，便于debug。\"]},\"46\":{\"h\":\"设置通信管脚\",\"t\":[\"下一步是为UART控制器分配通信管脚。\",\"ESP_ERROR_CHECK(uart_set_pin(UART_NUM_SERVO, UART_NUM_SERVO_TX, UART_NUM_SERVO_RX, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE));\",\"通信管脚分配函数uart_set_pin(uart_port_t uart_num, int tx_io_num, int rx_io_num, int rts_io_num, int cts_io_num)共有5个参数，分别为UART控制器编号、TX端口、RX端口、RTS控制端口和CTS控制端口。\",\"但笔者没用到RTS和CTS功能，所以使用UART_PIN_NO_CHANGE指定默认引脚。\"]},\"47\":{\"h\":\"安装驱动程序\",\"t\":[\"安装UART驱动程序需要提供下列参数\",\"UART 控制器编号\",\"Tx 环形缓冲区的大小\",\"Rx 环形缓冲区的大小\",\"指向事件队列句柄的指针\",\"事件队列大小\",\"分配中断的标志\",\"uart_driver_install(uart_port_t uart_num, int rx_buffer_size, int tx_buffer_size, int event_queue_size, QueueHandle_t *uart_queue, int intr_alloc_flags)是UART驱动安装函数，传入变量与上面提到的参数一一对应。\",\"笔者的实践如下，其中RX_BUF_SIZE宏定义为1024。\",\" ESP_ERROR_CHECK(uart_driver_install(UART_NUM_SERVO, RX_BUF_SIZE * 2, 0, 0, NULL, 0));\",\"这样一来，UART就已经配置完毕，可以开始通信了。\"]},\"48\":{\"h\":\"UART收发操作\",\"t\":[\"ESP-IDF编程指南指出：\",\"发送数据的过程分为以下步骤：\",\"将数据写入 Tx FIFO 缓冲区\",\"FSM 序列化数据\",\"FSM 发送数据\",\"接收数据的过程类似，只是步骤相反：\",\"FSM 处理且并行化传入的串行流\",\"FSM 将数据写入 Rx FIFO 缓冲区\",\"从 Rx FIFO 缓冲区读取数据\",\"因此，应用程序仅会通过 uart_write_bytes() 和 uart_read_bytes() 从特定缓冲区写入或读取数据，其余工作由 FSM 完成。\",\"幸而我们不需要了解技术实现细节，我们只需要调用UART库进行收发操作。\"]},\"49\":{\"h\":\"UART发送\",\"t\":[\"UART的发送非常简单，只需要使用uart_write_bytes(uart_port_t uart_num, const void *src, size_t size)，传入参数分别为UART控制器编号，待发送数据和待发送数据长度，以下为笔者的实践。\",\"uart_write_bytes(UART_NUM_SERVO, servoCommand, strlen(servoCommand));\"]},\"50\":{\"h\":\"UART接收\",\"t\":[\"UART的接收稍复杂于发送。以下为笔者的UART接收实践，封装为一个函数以便于操作。\",\"void servoUARTread(char *UARTdata) { size_t bufferLenth; ESP_ERROR_CHECK(uart_get_buffered_data_len(UART_NUM_SERVO, &bufferLenth)); uart_read_bytes(UART_NUM_SERVO, UARTdata, bufferLenth, 100); ESP_ERROR_CHECK(uart_flush(UART_NUM_SERVO)); }\",\"传入一个字符串指针，便于传出数据。\",\"首先，使用uart_get_buffered_data_len()读取缓冲区数据大小，便于下一步指定读取长度。\",\"随后，使用uart_read_bytes()读取数据，最后的参数“100”为需要等待读取的free RTOS tick数。\",\"最后，使用uart_flush()清除缓冲区，以等待下一步读取操作。\"]},\"51\":{\"h\":\"单线串口收发干扰的解决\",\"t\":[\"笔者在使用串口助手测试舵机时发现，由于TX、RX短接，每次收到的数据不仅包括应当收到的数据，还包括作为指令发送的数据。简而言之，主机发送的数据会被自己再次收到。\",\"因此，我们可以先预设“应当收到”的数据，再在接收缓冲区中查找是否有数据与我们预设的“应当受到”的数据匹配，如果有，就表明发送成功。\",\"以下为笔者的实践：\",\"strConnect(servoRetrun, \\\"#\\\", servoID, \\\"!\\\"); // 拼凑出舵机“应该”有的返回值 char *isOK = NULL; // 串口读到的信息里有“应该”有的返回值吗？ isOK = strstr(UARTdata, servoRetrun); if (isOK != NULL)\"]},\"52\":{\"h\":\"总线舵机作为对象\",\"t\":[\"示例使用C++编写，所以笔者设计了舵机类，对舵机进行一定封装。\",\"class SERVO { private: char servoID[4] = \\\"000\\\"; //舵机编号，默认为000 char servoCommand[16]; //待发送的舵机指令 char servoRetrun[16]; //应当接收到的舵机回传 char resetPos[5] = \\\"0500\\\"; char openPos[5] = \\\"2000\\\"; public: bool servo_init(void); bool opendoor(); void setServoID(char out_servoID); SERVO(char *out_servoID); //构造函数 ~SERVO(); //析构函数 }; SERVO::SERVO(char out_servoID[4] = \\\"000\\\") { strcpy(servoID, out_servoID); servo_init(); } SERVO::~SERVO() { uart_driver_delete(UART_NUM_SERVO); } /******************************************************************************* ****函数功能: 初始化舵机 ****入口参数: 无 ****出口参数: true: 设置成功 false: 设置失败 ****函数备注: 无 ********************************************************************************/ bool SERVO::servo_init() { init_uart2servo(); strConnect(servoCommand, \\\"#\\\", servoID, \\\"PID!\\\"); // 获取舵机ID的指令 uart_write_bytes(UART_NUM_SERVO, servoCommand, strlen(servoCommand)); // 发送，然后读取串口 char UARTdata[64]; servoUARTread(UARTdata); strConnect(servoRetrun, \\\"#\\\", servoID, \\\"!\\\"); // 拼凑出舵机“应该”有的返回值 char *isOK = NULL; // 串口读到的信息里有“应该”有的返回值吗？ isOK = strstr(UARTdata, servoRetrun); if (isOK != NULL) { isOK = NULL; strcpy(UARTdata, \\\"\\\\0\\\"); strcpy(servoRetrun, \\\"\\\\0\\\"); strConnect(servoCommand, \\\"#\\\", servoID, \\\"PMOD!\\\"); // 舵机读取工作模式指令 uart_write_bytes(UART_NUM_SERVO, servoCommand, strlen(servoCommand)); servoUARTread(UARTdata); strConnect(servoRetrun, \\\"#\\\", servoID, \\\"PMOD1!\\\"); // 舵机的工作模式应该是舵机模式，顺时针最大270度，即1 isOK = strstr(UARTdata, servoRetrun); if (isOK != NULL) { strcpy(UARTdata, \\\"\\\\0\\\"); // 工作模式不是1就设置成1 strConnect(servoCommand, \\\"#\\\", servoID, \\\"PMOD1!\\\"); uart_write_bytes(UART_NUM_SERVO, servoCommand, strlen(servoCommand)); } return true; } else { return false; } } /******************************************************************************* ****函数功能: 开门 ****入口参数: 无 ****出口参数: true: 开门成功 false: 开门失败 ****函数备注: 初始位为500，开门位为2000 ********************************************************************************/ bool SERVO::opendoor() { strConnect(servoCommand, \\\"#\\\", servoID, \\\"P\\\", openPos, \\\"T1000!\\\"); // #000P2000T1000! uart_write_bytes(UART_NUM_SERVO, servoCommand, strlen(servoCommand)); vTaskDelay(1000); strConnect(servoCommand, \\\"#\\\", servoID, \\\"P\\\", resetPos, \\\"T1000!\\\"); uart_write_bytes(UART_NUM_SERVO, servoCommand, strlen(servoCommand)); }\"]},\"53\":{\"h\":\"参考\",\"t\":[\"ESP-IDF编程指南——通用异步接收器/发送器 (UART)\"]},\"54\":{\"c\":[\"ESP32\",\"嵌入式开发\",\"物联网\"]},\"55\":{\"c\":[\"ESP32\",\"嵌入式开发\",\"物联网\"]},\"56\":{\"h\":\"FreeRTOS简介\"},\"57\":{\"h\":\"1.什么是FreeRTOS？\",\"t\":[\"FreeRTOS是一个热门的嵌入式设备用即时操作系统核心，它于2003年由Richard Barry设计，并已被经成功移植到35种不同的微控制器上。\",\"ESP32系列中的FreeRTOS和原始FreeRTOS有所不同。原始FreeRTOS是一款小巧高效的实时操作系统，适用于许多单核MCU和SoC。但为了支持双核ESP芯片，如ESP32、ESP32-S3、ESP32-P4，ESP-IDF特别提供了支持双核对称多处理 (SMP) 的 FreeRTOS 实现。\"]},\"58\":{\"h\":\"2.为什么学习FreeRTOS？\",\"t\":[\"对于ESP32系列单片机而言，ESP-IDF在系统启动时会默认启动FreeRTOS。因此，如果我们想要高效地利用ESP32系列丰富的硬件资源，使用FreeRTOS几乎成为一种必然。此外，随着嵌入式硬件性能的不断发展，FreeRTOS所占用的系统资源比重越来越小，FreeRTOS已不再成为嵌入式硬件性能的负担。相反，RTOS提供的事件驱动型设计方式，使得RTOS只是在处理实际任务时才会运行，这能够更合理的利用CPU，也有利于实现日益发展的低功耗技术。在实际项目中，如果程序等待一个超时事件，传统的无RTOS情况下，要么在原地一直等待而不能执行其它任务，要么使用复杂（相对RTOS提供的任务机制而言）的状态机机制。如果使用RTOS，则可以很方便的将当前任务阻塞在该事件下，然后自动去执行别的任务，这显然更方便，并且可以高效的利用CPU。\",\"但与此同时，FreeRTOS也有一定弊端：\",\"大多数RTOS代码都具有一定规模，任何代码都可能带来BUG，何况是代码具有一定规模的RTOS，因此引入RTOS的同时也可能会引入该RTOS的BUG，这些RTOS本身的BUG一旦被触发，影响可能是是灾难性的。\",\"熟练的使用RTOS是一项技能，需要专业的知识储备和长期的经验积累。不将RTOS分析透彻，很容易为项目埋下错误。典型的，像中断优先级、任务堆栈分配、可重入等，都是更容易出错的地方。\",\"RTOS的优先级嵌套使得任务执行顺序、执行时序更难分析，甚至变成不可能。任务嵌套对所需的最大堆栈RAM大小估计也变得困难。这对于很多对安全有严格要求的场合是不可想象的。\",\"RTOS应该用于任务复杂的场合，以至于对任务调度的需求可以抵消RTOS所带来的稳定性影响，但大部分的应用并非复杂到需要RTOS。\",\"随着物联网的发展，未来的嵌入式产品必然更为复杂、连接性更强以及需要更丰富的用户界面。当处理这些任务时，一个好的RTOS就变得不可缺少了。\",\"书到用时方恨少，我希望自己永远不会有这种感觉。\"]},\"59\":{\"h\":\"参考\",\"t\":[\"1.ESP-IDF FreeRTOS概述\"]},\"60\":{\"c\":[\"ESP32\",\"嵌入式开发\"]},\"61\":{\"c\":[\"ESP32\",\"嵌入式开发\",\"FreeRTOS\"]},\"62\":{\"h\":\"有用的Docker镜像\"},\"63\":{\"h\":\"为什么用Docker？\",\"t\":[\"Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\",\"轻量级、可移植的特性为家庭用户拓展NAS功能带来了极大的便利。如果没有Docker，光是处理不同设备上的依赖项就是难以愉悦的鸿沟。\",\"笔者使用的是黑群晖S6400，所以接下来的介绍都是黑群晖平台上几乎开箱即用的DockerIMG。但是出于一些原因，有的DockersIMG我不能在此列出。\"]},\"64\":{\"h\":\"影视服务器-Jellyfin\",\"t\":[\"搞NAS不搞影音等于白搞，搞影音不搞Jellyfin也是白搞。 这句话是彻头彻尾的暴论，但我的的确确不喜欢闭源的影视服务器。\",\"这里我推荐nyanmisaka/jellyfin, 这个映像支持硬解码，配置方面和其他版本的似乎没什么区别。\",\"但是jellyfin似乎一直有个BUG，就是在使用SUB字幕的时候，时间轴偶尔会对不上，需要自己手动调节。不知道现在修复没有，但是确实有点麻烦，因为每次打开节目都要调一下字幕的偏移量。中文的字幕还好，英文字幕就有点考验听力了，日语字幕基本上只能猜。\"]},\"65\":{\"h\":\"个人导航-heimdall\",\"t\":[\"以前，我时常为折腾而烦恼————也不是因为别的，而是折腾出来的东西太多，而且全是以网站的形式呈现的。这种情况下就不得不开一个收藏夹，把自己做的东西收藏起来。但收藏夹毕竟不太美观，所以才有了heimdall这样的个人导航服务。\",\"linuxserver/heimdall\",\"所谓个人导航，就是个人搭建的一种网络导航，有点像2345导航之类的，但放的全是自己的网站（当然也可以放其他网站，只是笔者需要整理自己折腾出来的东西）。\",\"简而言之，就是一个自己可以定制的导航主页。\"]},\"66\":{\"c\":[\"NAS\"]},\"67\":{\"c\":[\"折腾\"]},\"68\":{\"h\":\"黑群晖NAS的硬件配置\"},\"69\":{\"h\":\"CPU和主板的选择\",\"t\":[\"一般而言，我这种穷哥们上黑群晖都是为了便宜，所以这里就推荐性能普通的板U套装。这种板U套装和DIY装机所说的板U套装有所不同。NAS尤其是黑群晖常见的板U套装，CPU都是直接焊接在主板上的。这样一来，板U套装选择的局限性就比较大。 哥们你都玩黑群晖了还选啥？\",\"以下是笔者选择的板U配置：\",\"型号\",\"CPU\",\"intel N5105\",\"内存\",\"DDR4 最大64G\",\"网卡\",\"4个Intel i225 2.5G网卡\",\"SATA\",\"6个SATA3.0接口\",\"M.2\",\"2个\",\"外部USB接口\",\"2个USB3.0，2个USB2.0\",\"内部USB接口\",\"4个USB2.0\",\"尺寸\",\"标准ITX\",\"散热器\",\"自带一个丐版风冷\"]},\"70\":{\"h\":\"核显\",\"t\":[\"黑群晖中的核显，主要用于视频的硬解码。当然，如果不看视频的话，没有核显也无所谓。但像我这种垃圾佬，不折腾折腾视频服务器，那肯定是心里过不去的坎。所以为了更好的折腾，我还是选择了有核显的CPU。\",\"实际上，如果组一台纯粹用于文件管理的NAS，没有核显会更便宜。\"]},\"71\":{\"h\":\"板载网卡\",\"t\":[\"板载网卡的主要用途是联网，但是如果折腾软路由的话就需要多网口了。虽说单网口也可以搞单臂路由，但折腾起来还是没有那么爽快！所以我选择了4网卡的配置。而且是2.5G的速度，这个速度基本上是家庭网络中能廉价达到的最高速了。\",\"板载网卡一般都是单网卡1000M，但有些主板会上到2500M网卡。现在的内网速度越来越快，1000M的速度有点捉襟见肘，所以这里还是建议购买2500M的网卡，以备升级。买1000M的网卡也没关系，可以通过加装USB网卡升级，但这个时候就要考虑驱动的兼容问题了。 我懒得考虑\"]},\"72\":{\"h\":\"硬盘数量\",\"t\":[\"NAS的本质就是网络附属存储。既然是存储，硬盘的数量当然是非常重要的。目前的NAS采用的大都是SATA机械硬盘，全固态是富哥专属，和我这种垃圾佬关系不大。\",\"虽然笔者的机箱只能插4块硬盘，但还是选择了6个SATA接口，要为将来的升级留出空间嘛。\"]},\"73\":{\"h\":\"性能与功耗\",\"t\":[\"老实说，黑群晖如果作为单纯的文件管理服务器，没有必要在意性能。但是笔者喜欢折腾Docker，这就对性能有所要求了。这块CPU的主频是2.0GHz，搞搞Docker，搞搞轻量的虚拟机还是绰绰有余的。\"]},\"74\":{\"h\":\"硬盘的选择\"},\"75\":{\"h\":\"电源的选择\"},\"76\":{\"h\":\"机箱的选择\"},\"77\":{\"c\":[\"NAS\"]},\"78\":{\"c\":[\"折腾\"]},\"79\":{\"h\":\"NAS\",\"t\":[\"这是笔者在捡垃圾历程中的一些小记录和小技巧。专心很重要，捡电子垃圾也要有所侧重。笔者涉猎的领域主要是NAS、服务器和软路由，在这条路上踩了不少坑，也积累了不少经验，或许记录下来会更好。\",\"这个分类里全是NAS相关的内容，主要是黑群晖。\"]},\"80\":{\"h\":\"软路由入门指南\"},\"81\":{\"h\":\"什么是软路由？\",\"t\":[\"软路由是指利用台式机或服务器的供应商配合一定软件而形成的路由解决方案，主要靠对软件的设置，实现路由器的功能，它的软件与硬件是独立分开的。软路由使用普通计算机，使用通用的操作系统，如Linux或windows，因此软路由的设置事实上是windows或linux的设置。根据使用的操作系统不同，可以分为基于windows平台和基于Linux/bsd平台开发的软件路由器。\",\"软路由之所以叫软路由，就是为了和硬路由进行区分。硬路由有专用的包转发硬件设计，所以性能会优于软路由。虽然软路由使用软件实现包转发，但开放的生态和较强的硬件性能，或许可以实现“力大砖飞”的效果。\"]},\"82\":{\"h\":\"软路由能做什么？\",\"t\":[\"除了最基本的路由功能以外，软路由还有其他极其丰富的功能，这些功能均由软路由所安装的软件包决定。如home assistant 家庭物联网关、广告拦截、smartDNS等功能。\",\"注意\",\"有些功能可能违反相关法律，使用时请注意。\"]},\"83\":{\"h\":\"软路由的实现方式\",\"t\":[\"主路由：一般有2个或以上网口，一个设置成wan口一个设置为lan口。\",\"优点：操作比较简单，无需设置，设备全自动接入主路由。逻辑和普通路由器无异\",\"缺点：软路由出故障，整个环境不能上网。\",\"单臂路由：也是一种特殊的主路由，只有一个网口，既当wan口又当lan口使用。\",\"优点：实现不同vlan之间的通信，有助理解、学习VLAN原理和子接口概念。节省硬件资源\",\"缺点：逻辑不好理解，可能会比较错乱\",\"旁路由：一般只有1个网口，需要设置客户端的网关和DNS为旁路由的ip地址。\",\"优点：非侵入式、保持原先整个网络架构，按需接入客户端，旁路由故障，不会影响未设置网关为旁路由的客户端\",\"缺点：需要手动设置客户端（手机、电脑）等设备的网关和DNS，比较麻烦\"]},\"84\":{\"h\":\"软路由需要怎样的配置？\",\"t\":[\"和硬路由需要专门的路由器不同，软路由几乎没有硬件上的硬性要求————只要不是太差都可以，你甚至可以在树莓派上运行软路由系统。正因如此，笔者选择在hyper-V虚拟机上运行软路由系统。\",\"但是虚拟机总是需要实机承载，所以以下是笔者实体机的配置。\",\"硬件\",\"型号\",\"CPU\",\"Intel Xeon E3-1230 v3\",\"内存\",\"16 GB DDR3\",\"硬盘\",\"2TB HDD\",\"网卡1\",\"板载1G网卡\",\"网卡2\",\"螃蟹2.5G网卡\",\"网卡3\",\"螃蟹2.5G网卡\",\"其实就是洋垃圾经典配置啦（心虚）\",\"实际上笔者也折腾黑群晖NAS，但我并不推荐All in One的部署方式。软路由当然可以部署到NAS的虚拟机平台中。但一方面，软路由使用CPU进行软件层面的包转发，这对NAS孱弱的CPU性能而言算是不小的挑战。\",\"因此，笔者建议使用一台二手工控机，或者在性能一般的电脑上运行虚拟机。这是平衡功耗和开销的最佳选择。\"]},\"85\":{\"h\":\"软路由需要什么软件？\",\"t\":[\"软路由实际上就是一种操作系统。软路由操作系统有很多，但对于笔者这样的纯折腾用户，推荐使用OpenWRT。\",\"OpenWRT有很多个版本，就好像Linux有多个发行版。一般来说，比较高级的玩家一般会自己编译OpenWRT，并且在编译的过程中加入一些自己喜欢的插件。但笔者比较菜，又不喜欢用其他大佬编译好的系统。所以笔者会使用 OpenWrt固件下载与在线定制 这样可以自选的在线编译网站进行编译。以后笔者也会试着自己编译，有机会再更新\"]},\"86\":{\"c\":[\"软路由\"]},\"87\":{\"c\":[\"折腾\"]},\"88\":{\"h\":\"OpenWRT软件包推荐\"},\"89\":{\"h\":\"Lucky反向代理\",\"t\":[\"luci-app-lucky\",\"nginx反向代理的配置对于我这种 菜狗 而言比较困难，幸而有一款简便易用的反向代理服务器。\",\"这个软件包集成了DDNS、反向代理、防火墙管理等等一系列功能，而且是图形化页面，用起来相当方便😋。\"]},\"90\":{\"h\":\"SQM QoS\",\"t\":[\"luci-app-sqm\",\"所谓QoS，就是Quality of Service的意思，也就是网络的服务质量管理。\",\"简单来说，就是一个通过调节网络中数据包优先级，从而实现最佳网络服务质量的服务。试想一个场景：同一个局域网下，服务器正在马不停蹄地下载大量数据，你正在包点激情对枪，旁边还挂着电棍otto的直播，而你的女朋友正在和闺蜜煲微信电话粥。这时你家的上下行带宽均达到极限，这样的情况下，究竟谁的数据包应该优先通行才能带来最好的体验？这就需要使用QoS技术了。\",\"QoS本质上来说是一种算法，能按照给定的优先级分配带宽。一般而言，即时性较高且对时延敏感的应用，如即时网络电话、网络游戏这样的应用场景，其发送的数据包大都是比较短小的；而即时性不强且对时延不敏感的应用，如BT下载等，其发送到数据包往往较大。因此QoS往往遵循小包优先的策略，优先将带宽分配给小数据包，而将剩下的带宽再分配给大包。如果优先级较高的数据和优先级较低的数据包发生抢占，则大包会被丢弃。这就是QoS运行的简要原理。\",\"当然，QoS算法还有依据数据包的源地址、目标地址等作为分类的依据，但总的来说都是差不多的。\"]},\"91\":{\"h\":\"最后\",\"t\":[\"以上就是笔者认为OpenWRT必装的软件包了。我一般还会根据个人需要装一些科学上网的软件包，在此就不赘述了。\"]},\"92\":{\"c\":[\"软路由\"]},\"93\":{\"c\":[\"折腾\"]},\"94\":{\"h\":\"软路由\",\"t\":[\"这是笔者在捡垃圾历程中的一些小记录和小技巧。专心很重要，捡电子垃圾也要有所侧重。笔者涉猎的领域主要是NAS、服务器和软路由，在这条路上踩了不少坑，也积累了不少经验，或许记录下来会更好。\",\"这个分类里全是软路由相关的内容，主要是openwrt。\"]},\"95\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"96\":{\"h\":\"Posts\"},\"97\":{\"h\":\"ESP32\"},\"98\":{\"h\":\"Embedded Development\"},\"99\":{\"h\":\"Free RTOS\"},\"100\":{\"h\":\"NASServer Router\"}},\"dirtCount\":0,\"index\":[[\"目标地址等作为分类的依据\",{\"1\":{\"90\":1}}],[\"目前的nas采用的大都是sata机械硬盘\",{\"1\":{\"72\":1}}],[\"优先将带宽分配给小数据包\",{\"1\":{\"90\":1}}],[\"优点\",{\"1\":{\"83\":3}}],[\"网络游戏这样的应用场景\",{\"1\":{\"90\":1}}],[\"网卡3\",{\"1\":{\"84\":1}}],[\"网卡2\",{\"1\":{\"84\":1}}],[\"网卡1\",{\"1\":{\"84\":1}}],[\"网卡\",{\"1\":{\"69\":1}}],[\"能按照给定的优先级分配带宽\",{\"1\":{\"90\":1}}],[\"究竟谁的数据包应该优先通行才能带来最好的体验\",{\"1\":{\"90\":1}}],[\"旁边还挂着电棍otto的直播\",{\"1\":{\"90\":1}}],[\"旁路由故障\",{\"1\":{\"83\":1}}],[\"旁路由\",{\"1\":{\"83\":1}}],[\"你正在包点激情对枪\",{\"1\":{\"90\":1}}],[\"你甚至可以在树莓派上运行软路由系统\",{\"1\":{\"84\":1}}],[\"服务器正在马不停蹄地下载大量数据\",{\"1\":{\"90\":1}}],[\"服务器和软路由\",{\"1\":{\"79\":1,\"94\":1}}],[\"同一个局域网下\",{\"1\":{\"90\":1}}],[\"同时\",{\"1\":{\"3\":1}}],[\"试想一个场景\",{\"1\":{\"90\":1}}],[\"qos算法还有依据数据包的源地址\",{\"1\":{\"90\":1}}],[\"qos本质上来说是一种算法\",{\"1\":{\"90\":1}}],[\"qos\",{\"0\":{\"90\":1}}],[\"queuehandle\",{\"1\":{\"47\":1}}],[\"queue\",{\"1\":{\"47\":2}}],[\"防火墙管理等等一系列功能\",{\"1\":{\"89\":1}}],[\"反向代理\",{\"1\":{\"89\":1}}],[\"幸而有一款简便易用的反向代理服务器\",{\"1\":{\"89\":1}}],[\"幸而我们不需要了解技术实现细节\",{\"1\":{\"48\":1}}],[\"菜狗\",{\"1\":{\"89\":1}}],[\"菜鸟教程\",{\"1\":{\"16\":1}}],[\"又不喜欢用其他大佬编译好的系统\",{\"1\":{\"85\":1}}],[\"推荐使用openwrt\",{\"1\":{\"85\":1}}],[\"心虚\",{\"1\":{\"84\":1}}],[\"螃蟹2\",{\"1\":{\"84\":2}}],[\"xeon\",{\"1\":{\"84\":1}}],[\"xtal\",{\"1\":{\"24\":1}}],[\"等设备的网关和dns\",{\"1\":{\"83\":1}}],[\"电脑\",{\"1\":{\"83\":1}}],[\"电源的选择\",{\"0\":{\"75\":1}}],[\"手机\",{\"1\":{\"83\":1}}],[\"按需接入客户端\",{\"1\":{\"83\":1}}],[\"按从功能到实现的顺序画的思维导图\",{\"1\":{\"13\":1}}],[\"保持原先整个网络架构\",{\"1\":{\"83\":1}}],[\"非侵入式\",{\"1\":{\"83\":1}}],[\"逻辑不好理解\",{\"1\":{\"83\":1}}],[\"逻辑和普通路由器无异\",{\"1\":{\"83\":1}}],[\"节省硬件资源\",{\"1\":{\"83\":1}}],[\"节省了大量的精力\",{\"1\":{\"11\":1}}],[\"学习vlan原理和子接口概念\",{\"1\":{\"83\":1}}],[\"学习之余\",{\"1\":{\"3\":1}}],[\"既当wan口又当lan口使用\",{\"1\":{\"83\":1}}],[\"既然是存储\",{\"1\":{\"72\":1}}],[\"单臂路由\",{\"1\":{\"83\":1}}],[\"单线串口收发干扰的解决\",{\"0\":{\"51\":1}}],[\"整个环境不能上网\",{\"1\":{\"83\":1}}],[\"缺点\",{\"1\":{\"83\":3}}],[\"设备全自动接入主路由\",{\"1\":{\"83\":1}}],[\"设置失败\",{\"1\":{\"52\":1}}],[\"设置成功\",{\"1\":{\"52\":1}}],[\"设置通信管脚\",{\"0\":{\"46\":1},\"1\":{\"44\":1}}],[\"设置通信参数\",{\"0\":{\"45\":1},\"1\":{\"44\":1}}],[\"设置波特率\",{\"1\":{\"44\":1}}],[\"设置计时器警报动作\",{\"0\":{\"30\":1}}],[\"设置中断的优先级\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"设置内部计时器器的分辨率\",{\"1\":{\"26\":1}}],[\"设置模块地址\",{\"1\":{\"11\":1}}],[\"操作比较简单\",{\"1\":{\"83\":1}}],[\"广告拦截\",{\"1\":{\"82\":1}}],[\"家庭物联网关\",{\"1\":{\"82\":1}}],[\"除了最基本的路由功能以外\",{\"1\":{\"82\":1}}],[\"力大砖飞\",{\"1\":{\"81\":1}}],[\"根据使用的操作系统不同\",{\"1\":{\"81\":1}}],[\"软路由\",{\"0\":{\"94\":1},\"2\":{\"86\":1,\"92\":1}}],[\"软路由操作系统有很多\",{\"1\":{\"85\":1}}],[\"软路由实际上就是一种操作系统\",{\"1\":{\"85\":1}}],[\"软路由需要什么软件\",{\"0\":{\"85\":1}}],[\"软路由需要怎样的配置\",{\"0\":{\"84\":1}}],[\"软路由使用cpu进行软件层面的包转发\",{\"1\":{\"84\":1}}],[\"软路由使用普通计算机\",{\"1\":{\"81\":1}}],[\"软路由当然可以部署到nas的虚拟机平台中\",{\"1\":{\"84\":1}}],[\"软路由几乎没有硬件上的硬性要求\",{\"1\":{\"84\":1}}],[\"软路由出故障\",{\"1\":{\"83\":1}}],[\"软路由的实现方式\",{\"0\":{\"83\":1}}],[\"软路由还有其他极其丰富的功能\",{\"1\":{\"82\":1}}],[\"软路由能做什么\",{\"0\":{\"82\":1}}],[\"软路由之所以叫软路由\",{\"1\":{\"81\":1}}],[\"软路由是指利用台式机或服务器的供应商配合一定软件而形成的路由解决方案\",{\"1\":{\"81\":1}}],[\"软路由入门指南\",{\"0\":{\"80\":1}}],[\"或者在性能一般的电脑上运行虚拟机\",{\"1\":{\"84\":1}}],[\"或者应对那些要求不改变用户级代码的错误\",{\"1\":{\"9\":1}}],[\"或许可以实现\",{\"1\":{\"81\":1}}],[\"或许记录下来会更好\",{\"1\":{\"79\":1,\"94\":1}}],[\"捡电子垃圾也要有所侧重\",{\"1\":{\"79\":1,\"94\":1}}],[\"专心很重要\",{\"1\":{\"79\":1,\"94\":1}}],[\"机箱的选择\",{\"0\":{\"76\":1}}],[\"机器上\",{\"1\":{\"63\":1}}],[\"老实说\",{\"1\":{\"73\":1}}],[\"性能与功耗\",{\"0\":{\"73\":1}}],[\"要为将来的升级留出空间嘛\",{\"1\":{\"72\":1}}],[\"要么使用复杂\",{\"1\":{\"58\":1}}],[\"要么在原地一直等待而不能执行其它任务\",{\"1\":{\"58\":1}}],[\"全固态是富哥专属\",{\"1\":{\"72\":1}}],[\"硬件\",{\"1\":{\"84\":1}}],[\"硬件流控模式\",{\"1\":{\"45\":1}}],[\"硬路由有专用的包转发硬件设计\",{\"1\":{\"81\":1}}],[\"硬盘\",{\"1\":{\"84\":1}}],[\"硬盘的选择\",{\"0\":{\"74\":1}}],[\"硬盘的数量当然是非常重要的\",{\"1\":{\"72\":1}}],[\"硬盘数量\",{\"0\":{\"72\":1}}],[\"买1000m的网卡也没关系\",{\"1\":{\"71\":1}}],[\"现在的内网速度越来越快\",{\"1\":{\"71\":1}}],[\"虽然软路由使用软件实现包转发\",{\"1\":{\"81\":1}}],[\"虽然笔者的机箱只能插4块硬盘\",{\"1\":{\"72\":1}}],[\"虽然功耗稍高\",{\"1\":{\"3\":1}}],[\"虽说单网口也可以搞单臂路由\",{\"1\":{\"71\":1}}],[\"板载1g网卡\",{\"1\":{\"84\":1}}],[\"板载网卡一般都是单网卡1000m\",{\"1\":{\"71\":1}}],[\"板载网卡的主要用途是联网\",{\"1\":{\"71\":1}}],[\"板载网卡\",{\"0\":{\"71\":1}}],[\"板u套装选择的局限性就比较大\",{\"1\":{\"69\":1}}],[\"没有必要在意性能\",{\"1\":{\"73\":1}}],[\"没有核显会更便宜\",{\"1\":{\"70\":1}}],[\"没有核显也无所谓\",{\"1\":{\"70\":1}}],[\"没看懂\",{\"1\":{\"12\":1}}],[\"黑群晖如果作为单纯的文件管理服务器\",{\"1\":{\"73\":1}}],[\"黑群晖中的核显\",{\"1\":{\"70\":1}}],[\"黑群晖nas的硬件配置\",{\"0\":{\"68\":1}}],[\"核显\",{\"0\":{\"70\":1}}],[\"自带一个丐版风冷\",{\"1\":{\"69\":1}}],[\"散热器\",{\"1\":{\"69\":1}}],[\"标准itx\",{\"1\":{\"69\":1}}],[\"尺寸\",{\"1\":{\"69\":1}}],[\"内部usb接口\",{\"1\":{\"69\":1}}],[\"内存\",{\"1\":{\"69\":1,\"84\":1}}],[\"外部usb接口\",{\"1\":{\"69\":1}}],[\"型号\",{\"1\":{\"69\":1,\"84\":1}}],[\"哥们你都玩黑群晖了还选啥\",{\"1\":{\"69\":1}}],[\"折腾\",{\"2\":{\"67\":1,\"78\":1,\"87\":1,\"93\":1}}],[\"把自己做的东西收藏起来\",{\"1\":{\"65\":1}}],[\"日语字幕基本上只能猜\",{\"1\":{\"64\":1}}],[\"英文字幕就有点考验听力了\",{\"1\":{\"64\":1}}],[\"时间轴偶尔会对不上\",{\"1\":{\"64\":1}}],[\"时钟的电源管理锁也会启动\",{\"1\":{\"36\":1}}],[\"时钟源配置\",{\"0\":{\"24\":1}}],[\"时钟源\",{\"1\":{\"23\":1}}],[\"配置方面和其他版本的似乎没什么区别\",{\"1\":{\"64\":1}}],[\"配置回调函数\",{\"0\":{\"34\":1}}],[\"搞搞轻量的虚拟机还是绰绰有余的\",{\"1\":{\"73\":1}}],[\"搞搞docker\",{\"1\":{\"73\":1}}],[\"搞影音不搞jellyfin也是白搞\",{\"1\":{\"64\":1}}],[\"搞nas不搞影音等于白搞\",{\"1\":{\"64\":1}}],[\"jellyfin\",{\"0\":{\"64\":1},\"1\":{\"64\":1}}],[\"judgestr\",{\"1\":{\"11\":1}}],[\"影视服务器\",{\"0\":{\"64\":1}}],[\"影响可能是是灾难性的\",{\"1\":{\"58\":1}}],[\"光是处理不同设备上的依赖项就是难以愉悦的鸿沟\",{\"1\":{\"63\":1}}],[\"轻量级\",{\"1\":{\"63\":1}}],[\"容器是完全使用沙箱机制\",{\"1\":{\"63\":1}}],[\"书到用时方恨少\",{\"1\":{\"58\":1}}],[\"当然\",{\"1\":{\"70\":1,\"90\":1}}],[\"当然也可以放其他网站\",{\"1\":{\"65\":1}}],[\"当处理这些任务时\",{\"1\":{\"58\":1}}],[\"当调用一个重载函数或重载运算符时\",{\"1\":{\"12\":1}}],[\"未来的嵌入式产品必然更为复杂\",{\"1\":{\"58\":1}}],[\"甚至变成不可能\",{\"1\":{\"58\":1}}],[\"执行时序更难分析\",{\"1\":{\"58\":1}}],[\"都是更容易出错的地方\",{\"1\":{\"58\":1}}],[\"都会导致编译器编译失败\",{\"1\":{\"11\":1}}],[\"任务嵌套对所需的最大堆栈ram大小估计也变得困难\",{\"1\":{\"58\":1}}],[\"任务堆栈分配\",{\"1\":{\"58\":1}}],[\"任何代码都可能带来bug\",{\"1\":{\"58\":1}}],[\"像中断优先级\",{\"1\":{\"58\":1}}],[\"典型的\",{\"1\":{\"58\":1}}],[\"很容易为项目埋下错误\",{\"1\":{\"58\":1}}],[\"需要手动设置客户端\",{\"1\":{\"83\":1}}],[\"需要设置客户端的网关和dns为旁路由的ip地址\",{\"1\":{\"83\":1}}],[\"需要自己手动调节\",{\"1\":{\"64\":1}}],[\"需要专业的知识储备和长期的经验积累\",{\"1\":{\"58\":1}}],[\"需要先调用gptimer\",{\"1\":{\"36\":1}}],[\"熟练的使用rtos是一项技能\",{\"1\":{\"58\":1}}],[\"何况是代码具有一定规模的rtos\",{\"1\":{\"58\":1}}],[\"的效果\",{\"1\":{\"81\":1}}],[\"的状态机机制\",{\"1\":{\"58\":1}}],[\"的\",{\"1\":{\"57\":1,\"63\":1}}],[\"的数据匹配\",{\"1\":{\"51\":1}}],[\"的数据\",{\"1\":{\"51\":1}}],[\"适用于许多单核mcu和soc\",{\"1\":{\"57\":1}}],[\"原始freertos是一款小巧高效的实时操作系统\",{\"1\":{\"57\":1}}],[\"并且在编译的过程中加入一些自己喜欢的插件\",{\"1\":{\"85\":1}}],[\"并且可以高效的利用cpu\",{\"1\":{\"58\":1}}],[\"并已被经成功移植到35种不同的微控制器上\",{\"1\":{\"57\":1}}],[\"并最终显示在屏幕上\",{\"1\":{\"8\":1}}],[\"它的软件与硬件是独立分开的\",{\"1\":{\"81\":1}}],[\"它于2003年由richard\",{\"1\":{\"57\":1}}],[\"它是一种封装了数据和函数的组合\",{\"1\":{\"8\":1}}],[\"什么是软路由\",{\"0\":{\"81\":1}}],[\"什么是freertos\",{\"0\":{\"57\":1}}],[\"什么是封装\",{\"0\":{\"8\":1}}],[\"物联网\",{\"2\":{\"54\":1,\"55\":1}}],[\"初始位为500\",{\"1\":{\"52\":1}}],[\"初始化舵机\",{\"1\":{\"52\":1}}],[\"开门位为2000\",{\"1\":{\"52\":1}}],[\"开门失败\",{\"1\":{\"52\":1}}],[\"开门成功\",{\"1\":{\"52\":1}}],[\"开门\",{\"1\":{\"52\":1}}],[\"开源博客\",{\"0\":{\"0\":1}}],[\"顺时针最大270度\",{\"1\":{\"52\":1}}],[\"舵机的工作模式应该是舵机模式\",{\"1\":{\"52\":1}}],[\"舵机读取工作模式指令\",{\"1\":{\"52\":1}}],[\"舵机编号\",{\"1\":{\"52\":1}}],[\"然后发布到任何流行的\",{\"1\":{\"63\":1}}],[\"然后自动去执行别的任务\",{\"1\":{\"58\":1}}],[\"然后读取串口\",{\"1\":{\"52\":1}}],[\"然而\",{\"1\":{\"11\":1}}],[\"获取舵机id的指令\",{\"1\":{\"52\":1}}],[\"出口参数\",{\"1\":{\"52\":2}}],[\"无需设置\",{\"1\":{\"83\":1}}],[\"无\",{\"1\":{\"52\":3}}],[\"无论是读或写\",{\"1\":{\"11\":1}}],[\"入口参数\",{\"1\":{\"52\":2}}],[\"函数备注\",{\"1\":{\"52\":2}}],[\"函数功能\",{\"1\":{\"52\":2}}],[\"函数称为成员函数\",{\"1\":{\"8\":1}}],[\"~servo\",{\"1\":{\"52\":2}}],[\"~identifier\",{\"1\":{\"11\":1}}],[\"of\",{\"1\":{\"90\":1}}],[\"out\",{\"1\":{\"52\":4}}],[\"openwrt软件包推荐\",{\"0\":{\"88\":1}}],[\"openwrt固件下载与在线定制\",{\"1\":{\"85\":1}}],[\"openwrt有很多个版本\",{\"1\":{\"85\":1}}],[\"opendoor\",{\"1\":{\"52\":2}}],[\"openpos\",{\"1\":{\"52\":2}}],[\"one的部署方式\",{\"1\":{\"84\":1}}],[\"on\",{\"1\":{\"31\":3,\"34\":1}}],[\"待发送的舵机指令\",{\"1\":{\"52\":1}}],[\"待发送数据和待发送数据长度\",{\"1\":{\"49\":1}}],[\"默认为000\",{\"1\":{\"52\":1}}],[\"示例使用c++编写\",{\"1\":{\"52\":1}}],[\"串口读到的信息里有\",{\"1\":{\"51\":1,\"52\":1}}],[\"拼凑出舵机\",{\"1\":{\"51\":1,\"52\":1}}],[\"主路由\",{\"1\":{\"83\":1}}],[\"主机发送的数据会被自己再次收到\",{\"1\":{\"51\":1}}],[\"主要是openwrt\",{\"1\":{\"94\":1}}],[\"主要是黑群晖\",{\"1\":{\"79\":1}}],[\"主要靠对软件的设置\",{\"1\":{\"81\":1}}],[\"主要用于视频的硬解码\",{\"1\":{\"70\":1}}],[\"主要方向是信号处理和物联网技术\",{\"1\":{\"3\":1}}],[\"主要写esp32应用心得和我在图吧当垃圾佬的经历\",{\"1\":{\"2\":1}}],[\"每次收到的数据不仅包括应当收到的数据\",{\"1\":{\"51\":1}}],[\"清除缓冲区\",{\"1\":{\"50\":1}}],[\"清空指纹库\",{\"1\":{\"11\":1}}],[\"完成\",{\"1\":{\"48\":1}}],[\"完整的配置结构体如下图\",{\"1\":{\"45\":1}}],[\"应该\",{\"1\":{\"51\":2,\"52\":2}}],[\"应该怎么应用呢\",{\"0\":{\"13\":1}}],[\"应当接收到的舵机回传\",{\"1\":{\"52\":1}}],[\"应当受到\",{\"1\":{\"51\":1}}],[\"应当收到\",{\"1\":{\"51\":1}}],[\"应用程序仅会通过\",{\"1\":{\"48\":1}}],[\"从而实现最佳网络服务质量的服务\",{\"1\":{\"90\":1}}],[\"从而确保了安全\",{\"1\":{\"8\":1}}],[\"从特定缓冲区写入或读取数据\",{\"1\":{\"48\":1}}],[\"从\",{\"1\":{\"48\":1}}],[\"处理且并行化传入的串行流\",{\"1\":{\"48\":1}}],[\"只要不是太差都可以\",{\"1\":{\"84\":1}}],[\"只有一个网口\",{\"1\":{\"83\":1}}],[\"只是笔者需要整理自己折腾出来的东西\",{\"1\":{\"65\":1}}],[\"只是步骤相反\",{\"1\":{\"48\":1}}],[\"只需要使用uart\",{\"1\":{\"49\":1}}],[\"只消闻到其香味\",{\"1\":{\"2\":1}}],[\"序列化数据\",{\"1\":{\"48\":1}}],[\"缓冲区读取数据\",{\"1\":{\"48\":1}}],[\"缓冲区\",{\"1\":{\"48\":2}}],[\"将数据写入\",{\"1\":{\"48\":2}}],[\"将计时器从enable状态切换为start状态\",{\"1\":{\"37\":1}}],[\"将计时器从init状态切换为enable状态\",{\"1\":{\"36\":1}}],[\"事件队列大小\",{\"1\":{\"47\":1}}],[\"事实上\",{\"1\":{\"26\":1}}],[\"指向事件队列句柄的指针\",{\"1\":{\"47\":1}}],[\"指纹模块对外暴露的接口只有四个函数\",{\"1\":{\"11\":1}}],[\"指纹最大容量\",{\"1\":{\"11\":1}}],[\"指纹id\",{\"1\":{\"11\":1}}],[\"环形缓冲区的大小\",{\"1\":{\"47\":2}}],[\"控制器编号\",{\"1\":{\"47\":1}}],[\"控制之前\",{\"1\":{\"36\":1}}],[\"共有5个参数\",{\"1\":{\"46\":1}}],[\"下一步是为uart控制器分配通信管脚\",{\"1\":{\"46\":1}}],[\"下面一一解释各项参数\",{\"1\":{\"23\":1}}],[\"下面是这个类被实例化为对象的具体案例\",{\"1\":{\"11\":1}}],[\"便于下一步指定读取长度\",{\"1\":{\"50\":1}}],[\"便于传出数据\",{\"1\":{\"50\":1}}],[\"便于debug\",{\"1\":{\"45\":1}}],[\"便于我们管理大型项目\",{\"1\":{\"11\":1}}],[\"该函数可以在操作失败时及时报错\",{\"1\":{\"45\":1}}],[\"该函数第一个传入参数为uart控制器编号\",{\"1\":{\"45\":1}}],[\"2tb\",{\"1\":{\"84\":1}}],[\"2个usb2\",{\"1\":{\"69\":1}}],[\"2个usb3\",{\"1\":{\"69\":1}}],[\"2个\",{\"1\":{\"69\":1}}],[\"2000\",{\"1\":{\"52\":1}}],[\"2的宏定义\",{\"1\":{\"45\":1}}],[\"2\",{\"0\":{\"58\":1},\"1\":{\"45\":1,\"47\":1,\"69\":2}}],[\"24\",{\"1\":{\"12\":1}}],[\"故本例使用uart\",{\"1\":{\"45\":1}}],[\"故初始化为null\",{\"1\":{\"29\":1}}],[\"停止位\",{\"1\":{\"45\":1}}],[\"停止位等\",{\"1\":{\"44\":1}}],[\"奇偶控制\",{\"1\":{\"45\":1}}],[\"传统的无rtos情况下\",{\"1\":{\"58\":1}}],[\"传入一个字符串指针\",{\"1\":{\"50\":1}}],[\"传入参数分别为uart控制器编号\",{\"1\":{\"49\":1}}],[\"传入变量与上面提到的参数一一对应\",{\"1\":{\"47\":1}}],[\"传入计时器句柄\",{\"1\":{\"36\":1}}],[\"传输位\",{\"1\":{\"45\":1}}],[\"比较高级的玩家一般会自己编译openwrt\",{\"1\":{\"85\":1}}],[\"比较麻烦\",{\"1\":{\"83\":1}}],[\"比特率\",{\"1\":{\"45\":1}}],[\"比如一台电视机\",{\"1\":{\"8\":1}}],[\"比如更新系统\",{\"1\":{\"2\":1}}],[\"6个sata3\",{\"1\":{\"69\":1}}],[\"64\",{\"1\":{\"52\":1}}],[\"6\",{\"1\":{\"44\":1}}],[\"和硬路由需要专门的路由器不同\",{\"1\":{\"84\":1}}],[\"和我这种垃圾佬关系不大\",{\"1\":{\"72\":1}}],[\"和\",{\"1\":{\"44\":1,\"48\":1}}],[\"和计时器本身的配置一样\",{\"1\":{\"31\":1}}],[\"5g的速度\",{\"1\":{\"71\":1}}],[\"5g网卡\",{\"1\":{\"69\":1,\"84\":2}}],[\"5\",{\"1\":{\"44\":1,\"52\":2}}],[\"5000\",{\"1\":{\"11\":1}}],[\"404\",{\"1\":{\"95\":1}}],[\"4个usb2\",{\"1\":{\"69\":1}}],[\"4个intel\",{\"1\":{\"69\":1}}],[\"4\",{\"1\":{\"44\":1,\"52\":2}}],[\"到\",{\"1\":{\"44\":1}}],[\"到达这个数就会警报\",{\"1\":{\"31\":1}}],[\"到达这个数时警报\",{\"1\":{\"31\":1}}],[\"步骤\",{\"1\":{\"44\":3}}],[\"触发特定通信事件的中断\",{\"1\":{\"44\":1}}],[\"接收数据的过程类似\",{\"1\":{\"48\":1}}],[\"接收数据\",{\"1\":{\"44\":1}}],[\"发送器\",{\"1\":{\"53\":1}}],[\"发送数据\",{\"1\":{\"48\":1}}],[\"发送数据的过程分为以下步骤\",{\"1\":{\"48\":1}}],[\"发送\",{\"1\":{\"44\":1,\"52\":1}}],[\"运行阶段\",{\"1\":{\"44\":1}}],[\"运行\",{\"1\":{\"44\":1}}],[\"驱动程序分配资源\",{\"1\":{\"44\":1}}],[\"为需要等待读取的free\",{\"1\":{\"50\":1}}],[\"为可选步骤\",{\"1\":{\"44\":1}}],[\"为配置阶段\",{\"1\":{\"44\":1}}],[\"为\",{\"1\":{\"44\":2}}],[\"为什么用docker\",{\"0\":{\"63\":1}}],[\"为什么学习freertos\",{\"0\":{\"58\":1}}],[\"为什么还要c++\",{\"0\":{\"10\":1}}],[\"为什么要封装\",{\"0\":{\"9\":1}}],[\"为什么写博客\",{\"0\":{\"1\":1}}],[\"安装uart驱动程序需要提供下列参数\",{\"1\":{\"47\":1}}],[\"安装驱动程序\",{\"0\":{\"47\":1},\"1\":{\"44\":1}}],[\"安全等级\",{\"1\":{\"11\":1}}],[\"分配中断的标志\",{\"1\":{\"47\":1}}],[\"分配连接设备的管脚\",{\"1\":{\"44\":1}}],[\"分别为uart控制器编号\",{\"1\":{\"46\":1}}],[\"分别用于发送8位\",{\"1\":{\"12\":1}}],[\"干扰可以通过软件方法解决\",{\"1\":{\"42\":1}}],[\"总线舵机作为对象\",{\"0\":{\"52\":1}}],[\"总线舵机是一种利用uart总线进行控制的舵机\",{\"1\":{\"42\":1}}],[\"总线舵机\",{\"0\":{\"41\":1}}],[\"总的来说\",{\"1\":{\"14\":1}}],[\"启动计时器\",{\"0\":{\"37\":1},\"1\":{\"37\":1}}],[\"相互之间不会有任何接口\",{\"1\":{\"63\":1}}],[\"相对rtos提供的任务机制而言\",{\"1\":{\"58\":1}}],[\"相反\",{\"1\":{\"58\":1}}],[\"相应的中断服务会一并使能\",{\"1\":{\"36\":1}}],[\"相当于对象初始化\",{\"1\":{\"11\":1}}],[\"回调函数的函数名\",{\"1\":{\"34\":1}}],[\"回调函数的第一个参数为计时器的句柄\",{\"1\":{\"34\":1}}],[\"格式如下\",{\"1\":{\"34\":1}}],[\"紧接着\",{\"1\":{\"34\":1}}],[\"提供\",{\"1\":{\"34\":1}}],[\"提醒cpu处理相应的事件\",{\"1\":{\"31\":1}}],[\"由于tx\",{\"1\":{\"51\":1}}],[\"由于esp32使用uart\",{\"1\":{\"45\":1}}],[\"由于此函数在\",{\"1\":{\"34\":1}}],[\"由gptimer\",{\"1\":{\"34\":1}}],[\"由驱动传入\",{\"1\":{\"34\":1}}],[\"其发送到数据包往往较大\",{\"1\":{\"90\":1}}],[\"其发送的数据包大都是比较短小的\",{\"1\":{\"90\":1}}],[\"其实就是洋垃圾经典配置啦\",{\"1\":{\"84\":1}}],[\"其余工作由\",{\"1\":{\"48\":1}}],[\"其中rx\",{\"1\":{\"47\":1}}],[\"其中\",{\"1\":{\"34\":1}}],[\"其他配置\",{\"0\":{\"28\":1}}],[\"其他应用可以复用这些通信模块\",{\"1\":{\"14\":1}}],[\"+=\",{\"1\":{\"34\":1}}],[\"必须确保该函数不会试图阻塞\",{\"1\":{\"34\":1}}],[\"必须为布尔值\",{\"1\":{\"34\":1}}],[\"警报事件\",{\"1\":{\"33\":1}}],[\"注册该配置\",{\"1\":{\"45\":1}}],[\"注册回调函数\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"注册事件回调函数\",{\"0\":{\"33\":1}}],[\"注意\",{\"1\":{\"29\":1,\"82\":1}}],[\"`\",{\"1\":{\"32\":1}}],[\"`esp\",{\"1\":{\"32\":1}}],[\"是uart驱动安装函数\",{\"1\":{\"47\":1}}],[\"是否自动重载\",{\"1\":{\"31\":1}}],[\"是一种用户自定义的数据类型\",{\"1\":{\"8\":1}}],[\"是一门广泛应用的嵌入式开发语言\",{\"1\":{\"5\":1}}],[\"例子的配置如下\",{\"1\":{\"31\":1}}],[\"道理是一样的\",{\"1\":{\"31\":1}}],[\"生活中\",{\"1\":{\"31\":1}}],[\"生成一次性警报\",{\"1\":{\"22\":1}}],[\"生成周期性警报\",{\"1\":{\"22\":1}}],[\"生成模板\",{\"1\":{\"11\":1}}],[\"生成特征\",{\"1\":{\"11\":1}}],[\"所谓qos\",{\"1\":{\"90\":1}}],[\"所谓个人导航\",{\"1\":{\"65\":1}}],[\"所谓的警报动作\",{\"1\":{\"31\":1}}],[\"所以笔者会使用\",{\"1\":{\"85\":1}}],[\"所以笔者设计了舵机类\",{\"1\":{\"52\":1}}],[\"所以以下是笔者实体机的配置\",{\"1\":{\"84\":1}}],[\"所以性能会优于软路由\",{\"1\":{\"81\":1}}],[\"所以这里还是建议购买2500m的网卡\",{\"1\":{\"71\":1}}],[\"所以这里就推荐性能普通的板u套装\",{\"1\":{\"69\":1}}],[\"所以为了更好的折腾\",{\"1\":{\"70\":1}}],[\"所以才有了heimdall这样的个人导航服务\",{\"1\":{\"65\":1}}],[\"所以接下来的介绍都是黑群晖平台上几乎开箱即用的dockerimg\",{\"1\":{\"63\":1}}],[\"所以使用uart\",{\"1\":{\"46\":1}}],[\"所以本文暂且按下不表\",{\"1\":{\"15\":1}}],[\"所以在与通信协议有关的程序编写完成后\",{\"1\":{\"14\":1}}],[\"所以用到析构函数的情况很少\",{\"1\":{\"11\":1}}],[\"所以写出来供参考😋\",{\"1\":{\"2\":1}}],[\"所以我选择了4网卡的配置\",{\"1\":{\"71\":1}}],[\"所以我选择利用个人博客发表自己学习的心得与见解\",{\"1\":{\"1\":1}}],[\"所以我也仿照前人的方式\",{\"1\":{\"1\":1}}],[\"所以创建了这个博客\",{\"1\":{\"0\":1}}],[\"使得rtos只是在处理实际任务时才会运行\",{\"1\":{\"58\":1}}],[\"使系统为该uart通信分配相应资源\",{\"1\":{\"45\":1}}],[\"使计时器开始工作\",{\"1\":{\"37\":1}}],[\"使能计时器\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"使出现计时器资源不足等错误时能及时报错\",{\"1\":{\"29\":1}}],[\"使用时请注意\",{\"1\":{\"82\":1}}],[\"使用通用的操作系统\",{\"1\":{\"81\":1}}],[\"使用freertos几乎成为一种必然\",{\"1\":{\"58\":1}}],[\"使用uart\",{\"1\":{\"45\":1,\"50\":3}}],[\"使用中断\",{\"1\":{\"44\":1}}],[\"使用esp\",{\"1\":{\"29\":1}}],[\"使用public权限暴露指纹模块对外接口\",{\"1\":{\"11\":1}}],[\"使用private权限封装内部变量和函数\",{\"1\":{\"11\":1}}],[\"进行检查\",{\"1\":{\"29\":1}}],[\"最大64g\",{\"1\":{\"69\":1}}],[\"最后的参数\",{\"1\":{\"50\":1}}],[\"最后\",{\"0\":{\"91\":1},\"1\":{\"29\":1,\"50\":1}}],[\"最长连续工作时间可以达到120天以上\",{\"1\":{\"2\":1}}],[\"第三个是传递给回调函数的上下文\",{\"1\":{\"35\":1}}],[\"第三个参数为用户自定义的传入上下文\",{\"1\":{\"34\":1}}],[\"第二个是回调函数结构体的地址\",{\"1\":{\"35\":1}}],[\"第二个参数为计时器警报数据\",{\"1\":{\"34\":1}}],[\"第二个参数传入刚刚配置的计时器警报结构体\",{\"1\":{\"32\":1}}],[\"第二个参数传入计时器句柄\",{\"1\":{\"29\":1}}],[\"第一个参数是配置时钟的句柄地址\",{\"1\":{\"35\":1}}],[\"第一个参数传入上文提到的计时器句柄\",{\"1\":{\"32\":1}}],[\"第一个参数传入上文配置好的计时器配置结构体\",{\"1\":{\"29\":1}}],[\"利用函数gptimer\",{\"1\":{\"29\":1}}],[\"随着物联网的发展\",{\"1\":{\"58\":1}}],[\"随着嵌入式硬件性能的不断发展\",{\"1\":{\"58\":1}}],[\"随后\",{\"1\":{\"29\":1,\"45\":1,\"50\":1}}],[\"随时随地获取高分辨率时间戳\",{\"1\":{\"22\":1}}],[\"方便我们操作计时器\",{\"1\":{\"29\":1}}],[\"首先\",{\"1\":{\"29\":1,\"50\":1}}],[\"实际上笔者也折腾黑群晖nas\",{\"1\":{\"84\":1}}],[\"实际上\",{\"1\":{\"70\":1}}],[\"实例化计时器警报\",{\"1\":{\"32\":1}}],[\"实例化计时器\",{\"1\":{\"29\":1}}],[\"实例化就是一种注册\",{\"1\":{\"29\":1}}],[\"实现不同vlan之间的通信\",{\"1\":{\"83\":1}}],[\"实现路由器的功能\",{\"1\":{\"81\":1}}],[\"实现\",{\"1\":{\"12\":1,\"57\":1}}],[\"实现了程序的解耦合\",{\"1\":{\"11\":1}}],[\"简单来说\",{\"1\":{\"90\":1}}],[\"简而言之\",{\"1\":{\"29\":2,\"51\":1,\"65\":1}}],[\"简要介绍c++的封装与多态在嵌入式开发中的应用\",{\"1\":{\"5\":1}}],[\"否则会使用指定的优先级\",{\"1\":{\"27\":1}}],[\"则大包会被丢弃\",{\"1\":{\"90\":1}}],[\"则可以很方便的将当前任务阻塞在该事件下\",{\"1\":{\"58\":1}}],[\"则释放已分配的资源\",{\"1\":{\"44\":1}}],[\"则会分配一个默认优先级的中断\",{\"1\":{\"27\":1}}],[\"则只需要检查类的代码\",{\"1\":{\"9\":1}}],[\"预分频器的最小分频系数为2\",{\"1\":{\"26\":1}}],[\"秒\",{\"1\":{\"26\":1}}],[\"计数器就会自动重载到\",{\"1\":{\"31\":1}}],[\"计数器每滴答一次相当于\",{\"1\":{\"26\":1}}],[\"计时器启动后\",{\"1\":{\"33\":1}}],[\"计时器警报实例化\",{\"0\":{\"32\":1}}],[\"计时器警报配置\",{\"0\":{\"31\":1}}],[\"计时器此时还未开启\",{\"1\":{\"29\":1}}],[\"计时器实例化\",{\"0\":{\"29\":1}}],[\"计时器无非就是递增或者递减\",{\"1\":{\"25\":1}}],[\"计时器嘀嗒频率配置\",{\"0\":{\"26\":1},\"1\":{\"23\":1}}],[\"计时器计数方向\",{\"0\":{\"25\":1},\"1\":{\"23\":1}}],[\"计时器配置\",{\"0\":{\"23\":1}}],[\"计时器也不例外\",{\"1\":{\"22\":1}}],[\"计时器通常在以下场景中使用\",{\"1\":{\"22\":1}}],[\"计时器的警报动作也需要使用结构体进行配置\",{\"1\":{\"31\":1}}],[\"计时器的定义本文不再赘述\",{\"1\":{\"22\":1}}],[\"计时器的配置是一个典型案例\",{\"1\":{\"20\":1}}],[\"​\",{\"1\":{\"26\":1}}],[\"本例使用了递增计数\",{\"1\":{\"25\":1}}],[\"本文所用的示例来自于esp32\",{\"1\":{\"22\":1}}],[\"本文的例子来源于基于esp32\",{\"1\":{\"42\":1}}],[\"本文的例子来源于as608指纹模块在esp\",{\"1\":{\"5\":1}}],[\"本文的应用场景是第二种\",{\"1\":{\"22\":1}}],[\"本文基于esp32\",{\"1\":{\"5\":1,\"22\":1,\"42\":1}}],[\"本文将以esp\",{\"1\":{\"5\":1}}],[\"还包括作为指令发送的数据\",{\"1\":{\"51\":1}}],[\"还可以选择晶振作为时钟\",{\"1\":{\"24\":1}}],[\"还有构造与析构函数\",{\"1\":{\"11\":1}}],[\"还有fpga负责嘛\",{\"1\":{\"2\":1}}],[\"频率最快可以到80mhz\",{\"1\":{\"24\":1}}],[\"一个设置成wan口一个设置为lan口\",{\"1\":{\"83\":1}}],[\"一个好的rtos就变得不可缺少了\",{\"1\":{\"58\":1}}],[\"一般来说\",{\"1\":{\"85\":1}}],[\"一般只有1个网口\",{\"1\":{\"83\":1}}],[\"一般有2个或以上网口\",{\"1\":{\"83\":1}}],[\"一般而言\",{\"1\":{\"69\":1,\"90\":1}}],[\"一般使用apb时钟\",{\"1\":{\"24\":1}}],[\"一切准备就绪\",{\"1\":{\"37\":1}}],[\"一字一句记下学习的路途\",{\"1\":{\"1\":1}}],[\"中文的字幕还好\",{\"1\":{\"64\":1}}],[\"中断优先级\",{\"1\":{\"23\":1}}],[\"中的小玛德莲娜饼干\",{\"1\":{\"2\":1}}],[\"0ghz\",{\"1\":{\"73\":1}}],[\"0接口\",{\"1\":{\"69\":1}}],[\"0500\",{\"1\":{\"52\":1}}],[\"000p2000t1000\",{\"1\":{\"52\":1}}],[\"000\",{\"1\":{\"52\":2}}],[\"0向上位机发送日志\",{\"1\":{\"45\":1}}],[\"0\",{\"1\":{\"23\":1,\"27\":2,\"34\":1,\"47\":3,\"52\":3,\"69\":3}}],[\"0x00000000\",{\"1\":{\"11\":1}}],[\"0xffffffff\",{\"1\":{\"11\":1}}],[\"gb\",{\"1\":{\"84\":1}}],[\"gptimer\",{\"1\":{\"23\":3,\"24\":2,\"25\":2,\"29\":4,\"31\":1,\"32\":3,\"34\":3,\"35\":3,\"36\":2,\"37\":2}}],[\"get\",{\"1\":{\"50\":2}}],[\"getrandomcode\",{\"1\":{\"11\":1}}],[\"getimage\",{\"1\":{\"11\":1}}],[\"genchar\",{\"1\":{\"11\":1}}],[\"定期触发事件\",{\"1\":{\"22\":1}}],[\"router\",{\"0\":{\"100\":1}}],[\"rtos应该用于任务复杂的场合\",{\"1\":{\"58\":1}}],[\"rtos的优先级嵌套使得任务执行顺序\",{\"1\":{\"58\":1}}],[\"rtos提供的事件驱动型设计方式\",{\"1\":{\"58\":1}}],[\"rtos\",{\"0\":{\"99\":1},\"1\":{\"50\":1}}],[\"rts控制端口和cts控制端口\",{\"1\":{\"46\":1}}],[\"rts\",{\"1\":{\"46\":1}}],[\"rx短接\",{\"1\":{\"51\":1}}],[\"rx端口\",{\"1\":{\"46\":1}}],[\"rx\",{\"1\":{\"46\":2,\"47\":3,\"48\":2}}],[\"rate\",{\"1\":{\"45\":1}}],[\"run\",{\"1\":{\"22\":1}}],[\"resetpos\",{\"1\":{\"52\":2}}],[\"resolution\",{\"1\":{\"23\":1,\"26\":2}}],[\"reload\",{\"1\":{\"31\":6}}],[\"return\",{\"1\":{\"34\":1,\"52\":2}}],[\"ret\",{\"1\":{\"29\":1}}],[\"read\",{\"1\":{\"48\":1,\"50\":2}}],[\"readnotepad\",{\"1\":{\"11\":1}}],[\"readsyspara\",{\"1\":{\"11\":1}}],[\"register\",{\"1\":{\"34\":1,\"35\":2}}],[\"regnum\",{\"1\":{\"11\":1}}],[\"regmodel\",{\"1\":{\"11\":1}}],[\">=\",{\"1\":{\"34\":1}}],[\">\",{\"1\":{\"22\":2}}],[\">>\",{\"1\":{\"12\":4}}],[\"即时性较高且对时延敏感的应用\",{\"1\":{\"90\":1}}],[\"即1\",{\"1\":{\"52\":1}}],[\"即tx与rx在同一条线上\",{\"1\":{\"42\":1}}],[\"即通知系统分配资源给上文所配置的计时器\",{\"1\":{\"29\":1}}],[\"即驱动程序是否允许系统在睡眠模式下关闭电源和是否将计时器中断标记为共享源\",{\"1\":{\"28\":1}}],[\"即计时器频率的最大值为40mhz\",{\"1\":{\"26\":1}}],[\"即\",{\"1\":{\"22\":1,\"24\":1}}],[\"即把类的成员分为了两个部分\",{\"1\":{\"10\":1}}],[\"面向对象的程序设计\",{\"2\":{\"18\":1}}],[\"面向对象编程方法在cotex\",{\"1\":{\"14\":1,\"16\":1}}],[\"嵌入式开发\",{\"2\":{\"17\":1,\"18\":1,\"39\":1,\"40\":1,\"54\":1,\"55\":1,\"60\":1,\"61\":1}}],[\"参考\",{\"0\":{\"16\":1,\"38\":1,\"53\":1,\"59\":1}}],[\"因此qos往往遵循小包优先的策略\",{\"1\":{\"90\":1}}],[\"因此软路由的设置事实上是windows或linux的设置\",{\"1\":{\"81\":1}}],[\"因此引入rtos的同时也可能会引入该rtos的bug\",{\"1\":{\"58\":1}}],[\"因此\",{\"1\":{\"48\":1,\"51\":1,\"58\":1,\"84\":1}}],[\"因此笔者并未就具体的影响进行探索\",{\"1\":{\"24\":1}}],[\"因此笔者不建议使用c++的运行时特性\",{\"1\":{\"15\":1}}],[\"因此使用计时器时无需考虑硬件所属的计时器组和计时器\",{\"1\":{\"22\":1}}],[\"因为每次打开节目都要调一下字幕的偏移量\",{\"1\":{\"64\":1}}],[\"因为通信协议都是标准的\",{\"1\":{\"14\":1}}],[\"因为我总觉得视频教程的信息密度低\",{\"1\":{\"1\":1}}],[\"后续笔者用到时会再写一篇\",{\"1\":{\"15\":1}}],[\"后记\",{\"0\":{\"15\":1}}],[\"值得一看\",{\"1\":{\"14\":1}}],[\"连接性更强以及需要更丰富的用户界面\",{\"1\":{\"58\":1}}],[\"连接检查\",{\"1\":{\"11\":1}}],[\"连通信协议的方法声明都写到文章里了\",{\"1\":{\"14\":1}}],[\"作者写得比较细\",{\"1\":{\"14\":1}}],[\"作者首先把各种硬件通信协议单独列出\",{\"1\":{\"14\":1}}],[\"再在接收缓冲区中查找是否有数据与我们预设的\",{\"1\":{\"51\":1}}],[\"再把与功能有关的应用聚合成功能类\",{\"1\":{\"14\":1}}],[\"再细分一些就是信号处理\",{\"1\":{\"2\":1}}],[\"形成通信类\",{\"1\":{\"14\":1}}],[\"讲了讲如何在嵌入式环境中使用面向对象的编程思想\",{\"1\":{\"14\":1}}],[\"别人是怎么在嵌入式开发中应用面向对象的设计方法的\",{\"0\":{\"14\":1}}],[\"答案就是函数传入参数的类型和顺序\",{\"1\":{\"12\":1}}],[\"那肯定是心里过不去的坎\",{\"1\":{\"70\":1}}],[\"那么一旦计数器警报\",{\"1\":{\"31\":1}}],[\"那么编译器在编译时如何区分名字相同的函数呢\",{\"1\":{\"12\":1}}],[\"那就配置为\",{\"1\":{\"25\":1}}],[\"那就是我的那台e3服务器和黑群晖nas了\",{\"1\":{\"2\":1}}],[\"8\",{\"1\":{\"12\":2,\"45\":1}}],[\"举个例子吧\",{\"1\":{\"12\":1}}],[\"举一个现实生活中的真实例子\",{\"1\":{\"8\":1}}],[\"决定选用最合适的定义\",{\"1\":{\"12\":1}}],[\"重载的数值\",{\"1\":{\"31\":1}}],[\"重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明\",{\"1\":{\"12\":1}}],[\"重载\",{\"0\":{\"12\":1}}],[\"m\",{\"1\":{\"69\":1}}],[\"m3内核芯片程序开发中的应用\",{\"1\":{\"14\":1,\"16\":1}}],[\"ms\",{\"1\":{\"11\":1}}],[\"match\",{\"1\":{\"11\":1}}],[\"mathscore\",{\"1\":{\"11\":1}}],[\"max\",{\"1\":{\"11\":1}}],[\"测试用\",{\"1\":{\"11\":1}}],[\"i225\",{\"1\":{\"69\":1}}],[\"iphone\",{\"1\":{\"63\":1}}],[\"isok\",{\"1\":{\"51\":3,\"52\":6}}],[\"isr\",{\"1\":{\"34\":1}}],[\"io\",{\"1\":{\"36\":1,\"46\":4}}],[\"if\",{\"1\":{\"34\":1,\"51\":1,\"52\":2}}],[\"ifdef\",{\"1\":{\"11\":1}}],[\"in\",{\"1\":{\"84\":1}}],[\"install\",{\"1\":{\"47\":2}}],[\"intel\",{\"1\":{\"69\":1,\"84\":1}}],[\"int\",{\"1\":{\"46\":4,\"47\":4}}],[\"intr\",{\"1\":{\"23\":1,\"27\":1,\"47\":1}}],[\"index\",{\"1\":{\"34\":1}}],[\"init\",{\"1\":{\"22\":1,\"52\":4}}],[\"id\",{\"1\":{\"12\":7}}],[\"iduartwrite\",{\"1\":{\"12\":6}}],[\"idtask\",{\"1\":{\"11\":1}}],[\"idpwd\",{\"1\":{\"11\":1}}],[\"idaddr\",{\"1\":{\"11\":2}}],[\"identifier\",{\"1\":{\"11\":6}}],[\"idf在系统启动时会默认启动freertos\",{\"1\":{\"58\":1}}],[\"idf特别提供了支持双核对称多处理\",{\"1\":{\"57\":1}}],[\"idf配置uart的步骤分为以下几步\",{\"1\":{\"44\":1}}],[\"idf编程指南指出\",{\"1\":{\"48\":1}}],[\"idf编程指南\",{\"1\":{\"38\":1,\"53\":1}}],[\"idf编程指南还给出了其他配置\",{\"1\":{\"28\":1}}],[\"idf支持的回调函数格式如下\",{\"1\":{\"34\":1}}],[\"idf的配置风格是使用结构体进行配置\",{\"1\":{\"45\":1}}],[\"idf的esp\",{\"1\":{\"29\":1}}],[\"idf的驱动层高度抽象\",{\"1\":{\"22\":1}}],[\"idf多使用结构体的方式进行配置\",{\"1\":{\"22\":1}}],[\"idf利用结构体进行各种配置\",{\"1\":{\"20\":1}}],[\"idf环境下的驱动\",{\"1\":{\"5\":1}}],[\"idf\",{\"1\":{\"5\":1,\"22\":1,\"42\":1,\"59\":1}}],[\"idf为例\",{\"1\":{\"5\":1}}],[\"waveindex\",{\"1\":{\"34\":3}}],[\"wave\",{\"1\":{\"34\":3}}],[\"wavecountertimer\",{\"1\":{\"23\":1,\"29\":3,\"31\":1,\"32\":2,\"35\":1,\"36\":1,\"37\":1}}],[\"while\",{\"1\":{\"11\":1}}],[\"write\",{\"1\":{\"12\":7,\"48\":1,\"49\":2,\"52\":5}}],[\"writenotepad\",{\"1\":{\"11\":1}}],[\"writereg\",{\"1\":{\"11\":1}}],[\"创建指纹识别器对象\",{\"1\":{\"11\":1}}],[\"绝大多数对象一经调用就永不销毁\",{\"1\":{\"11\":1}}],[\"让程序易读\",{\"1\":{\"11\":1}}],[\"让模块发送一个随机数\",{\"1\":{\"11\":1}}],[\"调用gptimer\",{\"1\":{\"32\":1,\"37\":1}}],[\"调用时只需要在四个函数中选择\",{\"1\":{\"11\":1}}],[\"调整音量\",{\"1\":{\"8\":1}}],[\"lucky\",{\"1\":{\"89\":1}}],[\"lucky反向代理\",{\"0\":{\"89\":1}}],[\"luci\",{\"1\":{\"89\":1,\"90\":1}}],[\"linuxserver\",{\"1\":{\"65\":1}}],[\"linux\",{\"1\":{\"63\":1}}],[\"lib\",{\"1\":{\"11\":1}}],[\"len\",{\"1\":{\"50\":2}}],[\"length\",{\"1\":{\"11\":1}}],[\"level\",{\"1\":{\"11\":1}}],[\"found\",{\"1\":{\"95\":1}}],[\"false\",{\"1\":{\"52\":3}}],[\"fsm\",{\"1\":{\"48\":5}}],[\"fifo\",{\"1\":{\"48\":3}}],[\"flush\",{\"1\":{\"50\":2}}],[\"flowctrl\",{\"1\":{\"45\":1}}],[\"flow\",{\"1\":{\"45\":1}}],[\"flags\",{\"1\":{\"31\":1,\"47\":1}}],[\"flag\",{\"1\":{\"11\":1}}],[\"free\",{\"0\":{\"99\":1}}],[\"freertos概述\",{\"1\":{\"59\":1}}],[\"freertos也有一定弊端\",{\"1\":{\"58\":1}}],[\"freertos已不再成为嵌入式硬件性能的负担\",{\"1\":{\"58\":1}}],[\"freertos所占用的系统资源比重越来越小\",{\"1\":{\"58\":1}}],[\"freertos\",{\"1\":{\"57\":1},\"2\":{\"61\":1}}],[\"freertos是一个热门的嵌入式设备用即时操作系统核心\",{\"1\":{\"57\":1}}],[\"freertos简介\",{\"0\":{\"56\":1}}],[\"fr\",{\"1\":{\"11\":7}}],[\"对于esp32系列单片机而言\",{\"1\":{\"58\":1}}],[\"对舵机进行一定封装\",{\"1\":{\"52\":1}}],[\"对象一经实例化\",{\"1\":{\"11\":1}}],[\"对象销毁时用于回收资源\",{\"1\":{\"11\":1}}],[\"对比指纹库等\",{\"1\":{\"11\":1}}],[\"析构函数在对象被销毁时自动调用\",{\"1\":{\"11\":1}}],[\"析构函数\",{\"1\":{\"11\":1,\"52\":1}}],[\"构造函数在初始化对象时自动被调用\",{\"1\":{\"11\":1}}],[\"构造函数\",{\"1\":{\"11\":1,\"52\":1}}],[\"确认码错误信息解析\",{\"1\":{\"11\":1}}],[\"embedded\",{\"0\":{\"98\":1}}],[\"empty\",{\"1\":{\"11\":1}}],[\"e3\",{\"1\":{\"84\":1}}],[\"else\",{\"1\":{\"52\":1}}],[\"edata\",{\"1\":{\"34\":1}}],[\"event\",{\"1\":{\"34\":3,\"35\":3,\"47\":1}}],[\"error\",{\"1\":{\"29\":2,\"32\":1,\"35\":1,\"36\":1,\"37\":1,\"45\":2,\"46\":1,\"47\":1,\"50\":2}}],[\"esp\",{\"1\":{\"20\":1,\"22\":2,\"29\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"44\":1,\"45\":2,\"46\":1,\"47\":1,\"48\":1,\"50\":2,\"53\":1,\"57\":1,\"58\":1,\"59\":1}}],[\"esp32系列中的freertos和原始freertos有所不同\",{\"1\":{\"57\":1}}],[\"esp32计时器\",{\"0\":{\"19\":1}}],[\"esp32\",{\"0\":{\"97\":1},\"1\":{\"22\":1,\"45\":1,\"57\":2},\"2\":{\"18\":1,\"39\":1,\"40\":1,\"54\":1,\"55\":1,\"60\":1,\"61\":1}}],[\"enable\",{\"1\":{\"22\":1,\"36\":2}}],[\"endif\",{\"1\":{\"11\":1}}],[\"ensure\",{\"1\":{\"11\":2}}],[\"ensuremessage\",{\"1\":{\"11\":1}}],[\"与as608模块握手\",{\"1\":{\"11\":1}}],[\"高速搜索\",{\"1\":{\"11\":1}}],[\"读取数据\",{\"1\":{\"50\":1}}],[\"读取缓冲区数据大小\",{\"1\":{\"50\":1}}],[\"读有效模板个数\",{\"1\":{\"11\":1}}],[\"读记事\",{\"1\":{\"11\":1}}],[\"读系统基本参数\",{\"1\":{\"11\":1}}],[\"写在前面\",{\"0\":{\"22\":1}}],[\"写了这么多\",{\"0\":{\"13\":1}}],[\"写记事本\",{\"1\":{\"11\":1}}],[\"写系统寄存器\",{\"1\":{\"11\":1}}],[\"删除驱动程序\",{\"1\":{\"44\":1}}],[\"删除所有指纹\",{\"1\":{\"11\":1}}],[\"删除指纹\",{\"1\":{\"11\":1}}],[\"删除指纹等\",{\"1\":{\"11\":1}}],[\"删除模板\",{\"1\":{\"11\":1}}],[\"ddr3\",{\"1\":{\"84\":1}}],[\"ddr4\",{\"1\":{\"69\":1}}],[\"docker\",{\"1\":{\"63\":1}}],[\"down\",{\"1\":{\"25\":1}}],[\"driver\",{\"1\":{\"47\":2,\"52\":1}}],[\"development\",{\"0\":{\"98\":1}}],[\"defaul\",{\"1\":{\"45\":1}}],[\"delete\",{\"1\":{\"52\":1}}],[\"deletchar\",{\"1\":{\"11\":1}}],[\"del\",{\"1\":{\"11\":2}}],[\"disable\",{\"1\":{\"45\":2}}],[\"direction\",{\"1\":{\"23\":1,\"25\":2}}],[\"data3\",{\"1\":{\"12\":2}}],[\"data2\",{\"1\":{\"12\":2}}],[\"data1\",{\"1\":{\"12\":4}}],[\"data\",{\"1\":{\"11\":1,\"12\":13,\"34\":1,\"35\":1,\"45\":2,\"50\":2}}],[\"dvd\",{\"1\":{\"8\":1}}],[\"储存模板\",{\"1\":{\"11\":1}}],[\"合并特征\",{\"1\":{\"11\":1}}],[\"搜索指纹\",{\"1\":{\"11\":1}}],[\"精确比对两枚指纹特征\",{\"1\":{\"11\":1}}],[\"bsd平台开发的软件路由器\",{\"1\":{\"81\":1}}],[\"barry设计\",{\"1\":{\"57\":1}}],[\"baud\",{\"1\":{\"45\":1}}],[\"buf\",{\"1\":{\"47\":2}}],[\"buffered\",{\"1\":{\"50\":2}}],[\"bufferlenth\",{\"1\":{\"50\":3}}],[\"buffer\",{\"1\":{\"47\":2}}],[\"bufferid\",{\"1\":{\"11\":4}}],[\"bits\",{\"1\":{\"45\":4}}],[\"bytes\",{\"1\":{\"12\":13,\"48\":2,\"49\":2,\"50\":2,\"52\":5}}],[\"bool\",{\"1\":{\"11\":1,\"34\":1,\"52\":4}}],[\"录入图像\",{\"1\":{\"11\":1}}],[\"录像机\",{\"1\":{\"8\":1}}],[\"判断中断接收的数组有没有应答包\",{\"1\":{\"11\":1}}],[\"v3\",{\"1\":{\"84\":1}}],[\"v虚拟机上运行软路由系统\",{\"1\":{\"84\":1}}],[\"vtaskdelay\",{\"1\":{\"11\":1,\"52\":1}}],[\"validn\",{\"1\":{\"11\":1}}],[\"validtempletenum\",{\"1\":{\"11\":1}}],[\"void\",{\"1\":{\"11\":24,\"12\":6,\"34\":1,\"35\":1,\"49\":1,\"50\":1,\"52\":2}}],[\"v5\",{\"1\":{\"5\":1,\"22\":1,\"42\":1}}],[\"波特率基数n\",{\"1\":{\"11\":1}}],[\"nginx反向代理的配置对于我这种\",{\"1\":{\"89\":1}}],[\"n5105\",{\"1\":{\"69\":1}}],[\"nasserver\",{\"0\":{\"100\":1}}],[\"nas的本质就是网络附属存储\",{\"1\":{\"72\":1}}],[\"nas尤其是黑群晖常见的板u套装\",{\"1\":{\"69\":1}}],[\"nas\",{\"0\":{\"79\":1},\"2\":{\"66\":1,\"77\":1}}],[\"not\",{\"1\":{\"95\":1}}],[\"note\",{\"1\":{\"11\":1}}],[\"notepagenum\",{\"1\":{\"11\":2}}],[\"no\",{\"1\":{\"46\":3}}],[\"new\",{\"1\":{\"29\":2}}],[\"null\",{\"1\":{\"29\":1,\"35\":1,\"47\":1,\"51\":2,\"52\":4}}],[\"num\",{\"1\":{\"12\":7,\"45\":6,\"46\":8,\"47\":2,\"49\":2,\"50\":3,\"52\":6}}],[\"nidtask任务调用\",{\"1\":{\"11\":1}}],[\"n\",{\"1\":{\"11\":3}}],[\"通用异步接收器\",{\"1\":{\"53\":1}}],[\"通用计时器\",{\"1\":{\"38\":1}}],[\"通信管脚分配函数uart\",{\"1\":{\"46\":1}}],[\"通信模式\",{\"1\":{\"45\":1}}],[\"通信\",{\"1\":{\"44\":2}}],[\"通过gptimer\",{\"1\":{\"35\":1}}],[\"通过创建类来支持封装\",{\"1\":{\"8\":1}}],[\"通讯数据包大小\",{\"1\":{\"11\":1}}],[\"assistant\",{\"1\":{\"82\":1}}],[\"as608\",{\"1\":{\"11\":1}}],[\"app\",{\"1\":{\"63\":1,\"89\":1,\"90\":1}}],[\"apb时钟最快不超过80mhz\",{\"1\":{\"23\":1}}],[\"apb\",{\"1\":{\"23\":1,\"24\":1}}],[\"alloc\",{\"1\":{\"47\":1}}],[\"alarm配置计时器是否自动重载\",{\"1\":{\"31\":1}}],[\"alarm\",{\"1\":{\"31\":6,\"32\":4,\"34\":4}}],[\"action\",{\"1\":{\"32\":2}}],[\"auto\",{\"1\":{\"31\":3}}],[\"arg\",{\"1\":{\"11\":1}}],[\"arduino环境的支持也让我回忆起了以前使用arduino\",{\"1\":{\"2\":1}}],[\"add\",{\"1\":{\"11\":3}}],[\"addr\",{\"1\":{\"11\":3}}],[\"匹配得分\",{\"1\":{\"11\":1}}],[\"posts\",{\"0\":{\"96\":1}}],[\"port\",{\"1\":{\"45\":1,\"46\":1,\"47\":1,\"49\":1}}],[\"porttick\",{\"1\":{\"11\":1}}],[\"p4\",{\"1\":{\"57\":1}}],[\"pmod1\",{\"1\":{\"52\":2}}],[\"pmod\",{\"1\":{\"52\":1}}],[\"pid\",{\"1\":{\"52\":1}}],[\"pin\",{\"1\":{\"46\":5}}],[\"param\",{\"1\":{\"45\":2}}],[\"parity\",{\"1\":{\"45\":2}}],[\"pagenum\",{\"1\":{\"11\":2}}],[\"pageid\",{\"1\":{\"11\":3}}],[\"per\",{\"1\":{\"34\":1}}],[\"period\",{\"1\":{\"11\":1}}],[\"priority\",{\"1\":{\"23\":1,\"27\":1}}],[\"printf\",{\"1\":{\"11\":1}}],[\"private\",{\"1\":{\"11\":1,\"52\":1}}],[\"press\",{\"1\":{\"11\":2}}],[\"public\",{\"1\":{\"11\":1,\"52\":1}}],[\"p\",{\"1\":{\"11\":3,\"52\":2}}],[\"ps\",{\"1\":{\"11\":23}}],[\"口令验证\",{\"1\":{\"11\":1}}],[\"=\",{\"1\":{\"11\":2,\"12\":4,\"23\":5,\"24\":2,\"25\":2,\"26\":1,\"27\":1,\"29\":1,\"31\":5,\"34\":3,\"45\":7,\"51\":3,\"52\":10}}],[\"t1000\",{\"1\":{\"52\":2}}],[\"tick数\",{\"1\":{\"50\":1}}],[\"timer\",{\"1\":{\"29\":3,\"32\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1}}],[\"time\",{\"1\":{\"23\":1,\"26\":2}}],[\"tx端口\",{\"1\":{\"46\":1}}],[\"tx\",{\"1\":{\"46\":2,\"47\":2,\"48\":1}}],[\"true\",{\"1\":{\"31\":1,\"34\":1,\"52\":3}}],[\"t创建一个计时器句柄\",{\"1\":{\"29\":1}}],[\"test\",{\"1\":{\"11\":1}}],[\"typedef\",{\"1\":{\"11\":2}}],[\"t\",{\"1\":{\"11\":53,\"12\":10,\"23\":1,\"29\":3,\"31\":1,\"32\":2,\"34\":5,\"35\":2,\"36\":1,\"37\":1,\"45\":3,\"46\":1,\"47\":2,\"49\":2,\"50\":1}}],[\"user\",{\"1\":{\"34\":1,\"35\":1}}],[\"up\",{\"1\":{\"23\":1,\"25\":1}}],[\"uartdata\",{\"1\":{\"50\":2,\"51\":1,\"52\":7}}],[\"uart的接收稍复杂于发送\",{\"1\":{\"50\":1}}],[\"uart的发送非常简单\",{\"1\":{\"49\":1}}],[\"uart接收\",{\"0\":{\"50\":1}}],[\"uart发送\",{\"0\":{\"49\":1}}],[\"uart收发操作\",{\"0\":{\"48\":1}}],[\"uart就已经配置完毕\",{\"1\":{\"47\":1}}],[\"uart2servo\",{\"1\":{\"45\":2,\"52\":1}}],[\"uart配置也不例外\",{\"1\":{\"45\":1}}],[\"uart配置\",{\"0\":{\"44\":1}}],[\"uart\",{\"1\":{\"12\":14,\"44\":4,\"45\":13,\"46\":8,\"47\":7,\"48\":2,\"49\":4,\"50\":6,\"52\":12,\"53\":1}}],[\"uint8\",{\"1\":{\"11\":34,\"12\":6}}],[\"uint16\",{\"1\":{\"11\":13,\"12\":2}}],[\"uint32\",{\"1\":{\"11\":6,\"12\":2}}],[\"uno调试pid的日子\",{\"1\":{\"2\":1}}],[\"怎么实现\",{\"1\":{\"11\":1}}],[\"用起来相当方便😋\",{\"1\":{\"89\":1}}],[\"用于回收相对应的系统资源\",{\"1\":{\"11\":1}}],[\"用\",{\"1\":{\"11\":1}}],[\"笔者建议使用一台二手工控机\",{\"1\":{\"84\":1}}],[\"笔者选择在hyper\",{\"1\":{\"84\":1}}],[\"笔者涉猎的领域主要是nas\",{\"1\":{\"79\":1,\"94\":1}}],[\"笔者使用的是黑群晖s6400\",{\"1\":{\"63\":1}}],[\"笔者使用类将指纹模块封装为一个对象\",{\"1\":{\"11\":1}}],[\"笔者在使用串口助手测试舵机时发现\",{\"1\":{\"51\":1}}],[\"笔者在知网找到一篇文章\",{\"1\":{\"14\":1}}],[\"笔者的实践如下\",{\"1\":{\"47\":1}}],[\"笔者强烈建议在调用注册函数时同时调用esp\",{\"1\":{\"45\":1}}],[\"笔者购买的总线舵机使用单线uart总线\",{\"1\":{\"42\":1}}],[\"笔者把句柄理解为指针\",{\"1\":{\"29\":1}}],[\"笔者需要在程序中调用一个使用串口通信的指纹模块\",{\"1\":{\"11\":1}}],[\"上下文中调用\",{\"1\":{\"34\":1}}],[\"上文提到\",{\"1\":{\"11\":1}}],[\"上述内容在c中都可以通过头文件实现\",{\"0\":{\"10\":1}}],[\"上述的其中一台服务器被我用来搭建软路由\",{\"1\":{\"3\":1}}],[\"刷指纹\",{\"1\":{\"11\":2}}],[\"而将剩下的带宽再分配给大包\",{\"1\":{\"90\":1}}],[\"而即时性不强且对时延不敏感的应用\",{\"1\":{\"90\":1}}],[\"而你的女朋友正在和闺蜜煲微信电话粥\",{\"1\":{\"90\":1}}],[\"而言比较困难\",{\"1\":{\"89\":1}}],[\"而且是图形化页面\",{\"1\":{\"89\":1}}],[\"而且是2\",{\"1\":{\"71\":1}}],[\"而且全是以网站的形式呈现的\",{\"1\":{\"65\":1}}],[\"而且传入变量也必须和下文一致\",{\"1\":{\"34\":1}}],[\"而是折腾出来的东西太多\",{\"1\":{\"65\":1}}],[\"而非\",{\"1\":{\"11\":1}}],[\"而只需要让指纹模块完成其该完成的动作\",{\"1\":{\"11\":1}}],[\"而指纹模块本身具有多种功能\",{\"1\":{\"11\":1}}],[\"校验密钥\",{\"1\":{\"11\":1}}],[\"以上就是笔者认为openwrt必装的软件包了\",{\"1\":{\"91\":1}}],[\"以上是本例中用到的中断配置\",{\"1\":{\"28\":1}}],[\"以后笔者也会试着自己编译\",{\"1\":{\"85\":1}}],[\"以备升级\",{\"1\":{\"71\":1}}],[\"以前\",{\"1\":{\"65\":1}}],[\"以至于对任务调度的需求可以抵消rtos所带来的稳定性影响\",{\"1\":{\"58\":1}}],[\"以等待下一步读取操作\",{\"1\":{\"50\":1}}],[\"以下为笔者的uart接收实践\",{\"1\":{\"50\":1}}],[\"以下为笔者的实践\",{\"1\":{\"49\":1,\"51\":1}}],[\"以下是笔者选择的板u配置\",{\"1\":{\"69\":1}}],[\"以下是笔者的项目结构\",{\"1\":{\"13\":1}}],[\"以下是笔者通过串口发送信息的三个函数\",{\"1\":{\"12\":1}}],[\"以此实现程序的简化\",{\"1\":{\"12\":1}}],[\"以笔者的项目为例\",{\"0\":{\"11\":1}}],[\"以便应对不断变化的需求\",{\"1\":{\"9\":1}}],[\"导致程序出现错误\",{\"1\":{\"10\":1}}],[\"访问标签使得抽象是强制的\",{\"1\":{\"10\":1}}],[\"规则协议或者外设\",{\"1\":{\"10\":1}}],[\"hdd\",{\"1\":{\"84\":1}}],[\"heimdall\",{\"0\":{\"65\":1},\"1\":{\"65\":1}}],[\"hey\",{\"1\":{\"3\":1}}],[\"hw\",{\"1\":{\"45\":1}}],[\"handle\",{\"1\":{\"29\":5,\"32\":2,\"34\":1,\"35\":2,\"36\":2,\"37\":2}}],[\"handshake\",{\"1\":{\"11\":1}}],[\"hz是笔者的宏定义\",{\"1\":{\"26\":1}}],[\"hz\",{\"1\":{\"23\":2,\"26\":3}}],[\"highspeedsearch\",{\"1\":{\"11\":1}}],[\"h文件代表一个硬件部件\",{\"1\":{\"10\":1}}],[\"cpu\",{\"1\":{\"69\":1,\"84\":1}}],[\"cpu都是直接焊接在主板上的\",{\"1\":{\"69\":1}}],[\"cpu和主板的选择\",{\"0\":{\"69\":1}}],[\"cts\",{\"1\":{\"46\":1}}],[\"ctrl\",{\"1\":{\"45\":1}}],[\"ctx\",{\"1\":{\"34\":1}}],[\"callbacks\",{\"1\":{\"34\":2,\"35\":3}}],[\"cycle\",{\"1\":{\"34\":1}}],[\"cbs\",{\"1\":{\"34\":1,\"35\":2}}],[\"cb\",{\"1\":{\"34\":2}}],[\"count配置的值\",{\"1\":{\"31\":1}}],[\"count设置警报事件的重载值\",{\"1\":{\"31\":1}}],[\"count设置警报事件的计数值\",{\"1\":{\"31\":1}}],[\"count\",{\"1\":{\"23\":1,\"25\":2,\"31\":2}}],[\"config\",{\"1\":{\"23\":2,\"29\":3,\"31\":2,\"32\":3,\"45\":7}}],[\"const\",{\"1\":{\"11\":1,\"29\":1,\"32\":1,\"34\":2,\"35\":1,\"45\":2,\"49\":1}}],[\"content\",{\"1\":{\"11\":1}}],[\"clock\",{\"1\":{\"23\":1,\"26\":2}}],[\"clk\",{\"1\":{\"23\":2,\"24\":4,\"45\":1}}],[\"class\",{\"1\":{\"11\":1,\"52\":1}}],[\"change指定默认引脚\",{\"1\":{\"46\":1}}],[\"change\",{\"1\":{\"46\":2}}],[\"char\",{\"1\":{\"11\":1,\"50\":1,\"51\":1,\"52\":10}}],[\"check\",{\"1\":{\"11\":2,\"29\":2,\"32\":1,\"35\":1,\"36\":1,\"37\":1,\"45\":2,\"46\":1,\"47\":1,\"50\":2}}],[\"cmd\",{\"1\":{\"11\":1}}],[\"c的头文件中也可以通过程序编写规范等方式实现只调用特定的接口\",{\"1\":{\"10\":1}}],[\"c和\",{\"1\":{\"10\":1}}],[\"c++有些功能需要在运行时进行操作\",{\"1\":{\"15\":1}}],[\"c++的面向对象特性还有很多\",{\"1\":{\"15\":1}}],[\"c++使用访问标签管理权限\",{\"1\":{\"10\":1}}],[\"c++为数据抽象提供了可能\",{\"1\":{\"8\":1}}],[\"c++\",{\"1\":{\"8\":1,\"16\":1}}],[\"c++大体上与c类似\",{\"1\":{\"5\":1}}],[\"c++嵌入式开发入门\",{\"0\":{\"4\":1}}],[\"可移植的特性为家庭用户拓展nas功能带来了极大的便利\",{\"1\":{\"63\":1}}],[\"可移植的容器中\",{\"1\":{\"63\":1}}],[\"可重入等\",{\"1\":{\"58\":1}}],[\"可动态产生特定事件\",{\"1\":{\"33\":1}}],[\"可能会比较错乱\",{\"1\":{\"83\":1}}],[\"可能对读者有所帮助\",{\"1\":{\"28\":1}}],[\"可能就会误调用我们不希望其调用的接口\",{\"1\":{\"10\":1}}],[\"可读性更强\",{\"1\":{\"12\":1}}],[\"可见\",{\"1\":{\"11\":1}}],[\"可被外部直接访问和不可被外部直接访问\",{\"1\":{\"10\":1}}],[\"可使用名称相同的\",{\"1\":{\"10\":1}}],[\"可以分为基于windows平台和基于linux\",{\"1\":{\"81\":1}}],[\"可以通过加装usb网卡升级\",{\"1\":{\"71\":1}}],[\"可以让开发者打包他们的应用以及依赖包到一个轻量级\",{\"1\":{\"63\":1}}],[\"可以开始通信了\",{\"1\":{\"47\":1}}],[\"可以拖动\",{\"1\":{\"13\":1}}],[\"可以用于一些初始值和初始配置的设置\",{\"1\":{\"11\":1}}],[\"可以用来创建具有相同属性和行为的多个对象\",{\"1\":{\"8\":1}}],[\"可以打开和关闭\",{\"1\":{\"8\":1}}],[\"看看这个改变会导致哪些影响\",{\"1\":{\"9\":1}}],[\"看着看着就不知道作者讲到哪儿了\",{\"1\":{\"1\":1}}],[\"编译器通过比较所使用的参数类型与定义中的参数类型\",{\"1\":{\"12\":1}}],[\"编译器会抛出错误\",{\"1\":{\"10\":1}}],[\"编译环境是esp\",{\"1\":{\"5\":1,\"22\":1,\"42\":1}}],[\"编写该类的作者就可以随意更改数据\",{\"1\":{\"9\":1}}],[\"就好像linux有多个发行版\",{\"1\":{\"85\":1}}],[\"就是一个通过调节网络中数据包优先级\",{\"1\":{\"90\":1}}],[\"就是一个自己可以定制的导航主页\",{\"1\":{\"65\":1}}],[\"就是quality\",{\"1\":{\"90\":1}}],[\"就是为了和硬路由进行区分\",{\"1\":{\"81\":1}}],[\"就是个人搭建的一种网络导航\",{\"1\":{\"65\":1}}],[\"就是在使用sub字幕的时候\",{\"1\":{\"64\":1}}],[\"就是让计时器计数到某个值时产生警报事件\",{\"1\":{\"31\":1}}],[\"就表明发送成功\",{\"1\":{\"51\":1}}],[\"就要配置一个回调函数结构体\",{\"1\":{\"34\":1}}],[\"就需要通过注册事件回调函数\",{\"1\":{\"33\":1}}],[\"就会执行printf\",{\"1\":{\"11\":1}}],[\"就c++而言\",{\"1\":{\"8\":1}}],[\"就可以操控电视\",{\"1\":{\"8\":1}}],[\"直接通过外部接口\",{\"1\":{\"8\":1}}],[\"如bt下载等\",{\"1\":{\"90\":1}}],[\"如即时网络电话\",{\"1\":{\"90\":1}}],[\"如home\",{\"1\":{\"82\":1}}],[\"如linux或windows\",{\"1\":{\"81\":1}}],[\"如esp32\",{\"1\":{\"57\":1}}],[\"如无需\",{\"1\":{\"44\":1}}],[\"如需在事件发生时调用某些函数\",{\"1\":{\"33\":1}}],[\"如\",{\"1\":{\"33\":1}}],[\"如同挂钟一般自由运行\",{\"1\":{\"22\":1}}],[\"如虚函数\",{\"1\":{\"15\":1}}],[\"如identifier\",{\"1\":{\"11\":1}}],[\"如注册uart资源等\",{\"1\":{\"11\":1}}],[\"如添加指纹\",{\"1\":{\"11\":1}}],[\"如初始化\",{\"1\":{\"11\":1}}],[\"如果优先级较高的数据和优先级较低的数据包发生抢占\",{\"1\":{\"90\":1}}],[\"如果组一台纯粹用于文件管理的nas\",{\"1\":{\"70\":1}}],[\"如果不看视频的话\",{\"1\":{\"70\":1}}],[\"如果没有docker\",{\"1\":{\"63\":1}}],[\"如果使用rtos\",{\"1\":{\"58\":1}}],[\"如果程序等待一个超时事件\",{\"1\":{\"58\":1}}],[\"如果我们想要高效地利用esp32系列丰富的硬件资源\",{\"1\":{\"58\":1}}],[\"如果我们尝试在这个函数中调用identifier\",{\"1\":{\"11\":1}}],[\"如果有\",{\"1\":{\"51\":1}}],[\"如果启用下面的\",{\"1\":{\"31\":1}}],[\"如果设置为\",{\"1\":{\"27\":1}}],[\"如果要使用递减计数\",{\"1\":{\"25\":1}}],[\"如果宏定义了test\",{\"1\":{\"11\":1}}],[\"如果开发人员疏忽\",{\"1\":{\"10\":1}}],[\"如果在其他部分调用类中的私有成员\",{\"1\":{\"10\":1}}],[\"如果实现发生改变\",{\"1\":{\"9\":1}}],[\"如果只在类的私有部分定义数据成员\",{\"1\":{\"9\":1}}],[\"如遥控器\",{\"1\":{\"8\":1}}],[\"如何转换信号\",{\"1\":{\"8\":1}}],[\"如音响\",{\"1\":{\"8\":1}}],[\"也是一种特殊的主路由\",{\"1\":{\"83\":1}}],[\"也积累了不少经验\",{\"1\":{\"79\":1,\"94\":1}}],[\"也不是因为别的\",{\"1\":{\"65\":1}}],[\"也可以实现虚拟化\",{\"1\":{\"63\":1}}],[\"也有利于实现日益发展的低功耗技术\",{\"1\":{\"58\":1}}],[\"也就是网络的服务质量管理\",{\"1\":{\"90\":1}}],[\"也就是对象的实例化\",{\"1\":{\"11\":1}}],[\"也就是说\",{\"1\":{\"8\":1}}],[\"也喜欢分享\",{\"1\":{\"0\":1}}],[\"播放器\",{\"1\":{\"8\":1}}],[\"添加指纹\",{\"1\":{\"11\":1}}],[\"添加外部组件\",{\"1\":{\"8\":1}}],[\"添加硬件之类的\",{\"1\":{\"2\":1}}],[\"切换频道\",{\"1\":{\"8\":1}}],[\"类似\",{\"1\":{\"63\":1}}],[\"类的继承等\",{\"1\":{\"15\":1}}],[\"类的内部受到保护\",{\"1\":{\"9\":1}}],[\"类实现可能随着时间的推移而发生变化\",{\"1\":{\"9\":1}}],[\"类可以被看作是一种模板\",{\"1\":{\"8\":1}}],[\"类中的数据称为成员变量\",{\"1\":{\"8\":1}}],[\"类用于指定对象的形式\",{\"1\":{\"8\":1}}],[\"数据位\",{\"1\":{\"44\":1}}],[\"数据封装\",{\"1\":{\"16\":1}}],[\"数据封装是一种把数据和操作数据的函数捆绑在一起的机制\",{\"1\":{\"8\":1}}],[\"数据抽象有两个重要的优势\",{\"1\":{\"9\":1}}],[\"数据抽象是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制\",{\"1\":{\"8\":1}}],[\"封装为一个函数以便于操作\",{\"1\":{\"50\":1}}],[\"封装是面向对象编程中的把数据和操作数据的函数绑定在一起的一个概念\",{\"1\":{\"8\":1}}],[\"封装与抽象\",{\"0\":{\"7\":1}}],[\"正因如此\",{\"1\":{\"84\":1}}],[\"正文\",{\"0\":{\"6\":1,\"21\":1,\"43\":1}}],[\"正在学习嵌入式开发\",{\"1\":{\"3\":1}}],[\"1230\",{\"1\":{\"84\":1}}],[\"115200\",{\"1\":{\"45\":1}}],[\"1000m的速度有点捉襟见肘\",{\"1\":{\"71\":1}}],[\"1000\",{\"1\":{\"52\":1}}],[\"100\",{\"1\":{\"50\":2}}],[\"10\",{\"1\":{\"31\":1}}],[\"16\",{\"1\":{\"12\":1,\"52\":2,\"84\":1}}],[\"16位和32位数据\",{\"1\":{\"12\":1}}],[\"1\",{\"0\":{\"57\":1},\"1\":{\"5\":1,\"11\":1,\"12\":7,\"22\":1,\"26\":1,\"31\":1,\"42\":1,\"44\":1,\"45\":1,\"59\":1}}],[\"3\",{\"1\":{\"5\":1,\"22\":1,\"42\":1,\"44\":1}}],[\"尤其是复杂系统的构建中更具优势\",{\"1\":{\"5\":1}}],[\"在此就不赘述了\",{\"1\":{\"91\":1}}],[\"在这条路上踩了不少坑\",{\"1\":{\"79\":1,\"94\":1}}],[\"在这个方向上\",{\"1\":{\"2\":1}}],[\"在这个博客创建的2024年\",{\"1\":{\"1\":1}}],[\"在实际项目中\",{\"1\":{\"58\":1}}],[\"在对计时器进行\",{\"1\":{\"36\":1}}],[\"在目标时间内响应\",{\"1\":{\"22\":1}}],[\"在c语言中\",{\"1\":{\"10\":1}}],[\"在嵌入式开发的部分领域\",{\"1\":{\"5\":1}}],[\"前言\",{\"0\":{\"5\":1,\"20\":1,\"42\":1}}],[\"研究研究高可用路由系统也是不错的消遣😋\",{\"1\":{\"3\":1}}],[\"免去了求人之苦和云服务器价格高昂的烦恼\",{\"1\":{\"3\":1}}],[\"想折腾物联网项目时也可以用自建服务器\",{\"1\":{\"3\":1}}],[\"想当一名嵌入式开发工程师\",{\"1\":{\"3\":1}}],[\"诸如docker之类的服务都可以自己托管\",{\"1\":{\"3\":1}}],[\"有机会再更新\",{\"1\":{\"85\":1}}],[\"有助理解\",{\"1\":{\"83\":1}}],[\"有些功能可能违反相关法律\",{\"1\":{\"82\":1}}],[\"有点像2345导航之类的\",{\"1\":{\"65\":1}}],[\"有用的docker镜像\",{\"0\":{\"62\":1}}],[\"有的dockersimg我不能在此列出\",{\"1\":{\"63\":1}}],[\"有的返回值吗\",{\"1\":{\"51\":1,\"52\":1}}],[\"有的返回值\",{\"1\":{\"51\":1,\"52\":1}}],[\"有的文章指出这样的设计会产生冲突\",{\"1\":{\"42\":1}}],[\"有两台自用的服务器\",{\"1\":{\"3\":1}}],[\"有人可能说esp32性能孱弱\",{\"1\":{\"2\":1}}],[\"工作模式不是1就设置成1\",{\"1\":{\"52\":1}}],[\"工作\",{\"1\":{\"3\":1}}],[\"负箧曳屣\",{\"1\":{\"3\":1}}],[\"负箧曳徙\",{\"1\":{\"1\":1}}],[\"个人导航\",{\"0\":{\"65\":1}}],[\"个人介绍\",{\"0\":{\"3\":1}}],[\"个人搭建博客早已是明日黄花\",{\"1\":{\"1\":1}}],[\"至于捡垃圾这方面\",{\"1\":{\"2\":1}}],[\"更重要的是容器性能开销极低\",{\"1\":{\"63\":1}}],[\"更高性能的实时处理\",{\"1\":{\"2\":1}}],[\"更何况\",{\"1\":{\"2\":1}}],[\"sqm\",{\"0\":{\"90\":1},\"1\":{\"90\":1}}],[\"smartdns等功能\",{\"1\":{\"82\":1}}],[\"smp\",{\"1\":{\"57\":1}}],[\"sata\",{\"1\":{\"69\":1}}],[\"sample\",{\"1\":{\"34\":1}}],[\"sclk\",{\"1\":{\"45\":1}}],[\"scaxlibur\",{\"0\":{\"0\":1}}],[\"source\",{\"1\":{\"45\":1}}],[\"src\",{\"1\":{\"23\":2,\"24\":4,\"49\":1}}],[\"showerrmessage\",{\"1\":{\"11\":1}}],[\"strcpy\",{\"1\":{\"52\":4}}],[\"strconnect\",{\"1\":{\"51\":1,\"52\":7}}],[\"strstr\",{\"1\":{\"51\":1,\"52\":2}}],[\"strlen\",{\"1\":{\"49\":1,\"52\":5}}],[\"struct\",{\"1\":{\"11\":2}}],[\"stop\",{\"1\":{\"45\":2}}],[\"storechar\",{\"1\":{\"11\":1}}],[\"start\",{\"1\":{\"37\":2}}],[\"startpage\",{\"1\":{\"11\":2}}],[\"step\",{\"1\":{\"34\":1}}],[\"service的意思\",{\"1\":{\"90\":1}}],[\"servoid\",{\"1\":{\"51\":1,\"52\":13}}],[\"servoretrun\",{\"1\":{\"51\":2,\"52\":6}}],[\"servouartread\",{\"1\":{\"50\":1,\"52\":2}}],[\"servocommand\",{\"1\":{\"49\":2,\"52\":16}}],[\"servo\",{\"1\":{\"45\":1,\"46\":3,\"47\":1,\"49\":1,\"50\":3,\"52\":16}}],[\"servo是指向uart\",{\"1\":{\"45\":1}}],[\"setservoid\",{\"1\":{\"52\":1}}],[\"set\",{\"1\":{\"32\":2,\"46\":2}}],[\"setaddr\",{\"1\":{\"11\":1}}],[\"search\",{\"1\":{\"11\":1}}],[\"searchresult\",{\"1\":{\"11\":3}}],[\"sendcheck\",{\"1\":{\"11\":1}}],[\"sendcmd\",{\"1\":{\"11\":1}}],[\"sendlength\",{\"1\":{\"11\":1}}],[\"sendflag\",{\"1\":{\"11\":1}}],[\"sendaddr\",{\"1\":{\"11\":1}}],[\"sendhead\",{\"1\":{\"11\":1}}],[\"syspara\",{\"1\":{\"11\":2}}],[\"size宏定义为1024\",{\"1\":{\"47\":1}}],[\"size\",{\"1\":{\"11\":1,\"47\":4,\"49\":2,\"50\":1}}],[\"s3有3个uart控制器\",{\"1\":{\"45\":1}}],[\"s3的高安全性宿舍智能门锁设计\",{\"1\":{\"42\":1}}],[\"s3的计时器从无到有共三种状态\",{\"1\":{\"22\":1}}],[\"s3用于并口dac通信的测试\",{\"1\":{\"22\":1}}],[\"s3\",{\"1\":{\"5\":1,\"22\":1,\"42\":1,\"57\":1}}],[\"s3凭借丰富的外设和240mhz的主频也能挑起大梁\",{\"1\":{\"2\":1}}],[\"难堪大任\",{\"1\":{\"2\":1}}],[\"难以勾起我的兴趣\",{\"1\":{\"1\":1}}],[\"美好的昨日记忆就在眼前徐徐展开\",{\"1\":{\"2\":1}}],[\"追忆似水年华\",{\"1\":{\"2\":1}}],[\"这就是qos运行的简要原理\",{\"1\":{\"90\":1}}],[\"这就需要使用qos技术了\",{\"1\":{\"90\":1}}],[\"这就对性能有所要求了\",{\"1\":{\"73\":1}}],[\"这时你家的上下行带宽均达到极限\",{\"1\":{\"90\":1}}],[\"这是平衡功耗和开销的最佳选择\",{\"1\":{\"84\":1}}],[\"这是笔者在捡垃圾历程中的一些小记录和小技巧\",{\"1\":{\"79\":1,\"94\":1}}],[\"这是我的座右铭\",{\"1\":{\"1\":1}}],[\"这块cpu的主频是2\",{\"1\":{\"73\":1}}],[\"这个分类里全是软路由相关的内容\",{\"1\":{\"94\":1}}],[\"这个分类里全是nas相关的内容\",{\"1\":{\"79\":1}}],[\"这个软件包集成了ddns\",{\"1\":{\"89\":1}}],[\"这个速度基本上是家庭网络中能廉价达到的最高速了\",{\"1\":{\"71\":1}}],[\"这个映像支持硬解码\",{\"1\":{\"64\":1}}],[\"这种板u套装和diy装机所说的板u套装有所不同\",{\"1\":{\"69\":1}}],[\"这种情况下就不得不开一个收藏夹\",{\"1\":{\"65\":1}}],[\"这里我推荐nyanmisaka\",{\"1\":{\"64\":1}}],[\"这句话是彻头彻尾的暴论\",{\"1\":{\"64\":1}}],[\"这对nas孱弱的cpu性能而言算是不小的挑战\",{\"1\":{\"84\":1}}],[\"这对于很多对安全有严格要求的场合是不可想象的\",{\"1\":{\"58\":1}}],[\"这对单片机而言可能会是较大的开销\",{\"1\":{\"15\":1}}],[\"这些功能均由软路由所安装的软件包决定\",{\"1\":{\"82\":1}}],[\"这些rtos本身的bug一旦被触发\",{\"1\":{\"58\":1}}],[\"这些均由后台驱动程序管理\",{\"1\":{\"22\":1}}],[\"这显然更方便\",{\"1\":{\"58\":1}}],[\"这能够更合理的利用cpu\",{\"1\":{\"58\":1}}],[\"这相当于变相配置了预分频器\",{\"1\":{\"26\":1}}],[\"这篇文章以一款自动校时电子钟项目为例\",{\"1\":{\"14\":1}}],[\"这三个函数的具体实现也不同\",{\"1\":{\"12\":1}}],[\"这样的情况下\",{\"1\":{\"90\":1}}],[\"这样可以自选的在线编译网站进行编译\",{\"1\":{\"85\":1}}],[\"这样一来\",{\"1\":{\"11\":2,\"47\":1,\"69\":1}}],[\"这样一块国产的芯片给我带来了太多的惊喜\",{\"1\":{\"2\":1}}],[\"这样\",{\"1\":{\"8\":1,\"11\":1,\"12\":1,\"36\":1}}],[\"这样能避免受到外界的干扰和误用\",{\"1\":{\"8\":1}}],[\"这俩哥们从初中就开始陪伴我\",{\"1\":{\"2\":1}}],[\"这俩哥们现在都挺稳定的\",{\"1\":{\"2\":1}}],[\"这或许就像\",{\"1\":{\"2\":1}}],[\"但总的来说都是差不多的\",{\"1\":{\"90\":1}}],[\"但对于笔者这样的纯折腾用户\",{\"1\":{\"85\":1}}],[\"但一方面\",{\"1\":{\"84\":1}}],[\"但开放的生态和较强的硬件性能\",{\"1\":{\"81\":1}}],[\"但还是选择了6个sata接口\",{\"1\":{\"72\":1}}],[\"但这个时候就要考虑驱动的兼容问题了\",{\"1\":{\"71\":1}}],[\"但这毕竟是一种非强制性的举措\",{\"1\":{\"10\":1}}],[\"但有些主板会上到2500m网卡\",{\"1\":{\"71\":1}}],[\"但折腾起来还是没有那么爽快\",{\"1\":{\"71\":1}}],[\"但像我这种垃圾佬\",{\"1\":{\"70\":1}}],[\"但放的全是自己的网站\",{\"1\":{\"65\":1}}],[\"但收藏夹毕竟不太美观\",{\"1\":{\"65\":1}}],[\"但大部分的应用并非复杂到需要rtos\",{\"1\":{\"58\":1}}],[\"但与此同时\",{\"1\":{\"58\":1}}],[\"但为了支持双核esp芯片\",{\"1\":{\"57\":1}}],[\"但笔者比较菜\",{\"1\":{\"85\":1}}],[\"但笔者没用到rts和cts功能\",{\"1\":{\"46\":1}}],[\"但笔者猜测如果总线上只有总线舵机\",{\"1\":{\"42\":1}}],[\"但笔者调用时并不关心其内部实现\",{\"1\":{\"11\":1}}],[\"但要注意计时器本身的计数方向\",{\"1\":{\"31\":1}}],[\"但可能为debug带来不便\",{\"1\":{\"29\":1}}],[\"但esp\",{\"1\":{\"28\":1}}],[\"但值得注意的是\",{\"1\":{\"26\":1}}],[\"但由于示例并非功率敏感\",{\"1\":{\"24\":1}}],[\"但由于嵌入式开发有时并不需要这么多的特性\",{\"1\":{\"15\":1}}],[\"但由于嵌入式开发中\",{\"1\":{\"11\":1}}],[\"但是虚拟机总是需要实机承载\",{\"1\":{\"84\":1}}],[\"但是笔者喜欢折腾docker\",{\"1\":{\"73\":1}}],[\"但是如果折腾软路由的话就需要多网口了\",{\"1\":{\"71\":1}}],[\"但是确实有点麻烦\",{\"1\":{\"64\":1}}],[\"但是jellyfin似乎一直有个bug\",{\"1\":{\"64\":1}}],[\"但是出于一些原因\",{\"1\":{\"63\":1}}],[\"但是它们的参数列表和定义\",{\"1\":{\"12\":1}}],[\"但是我们不知道它的内部实现细节\",{\"1\":{\"8\":1}}],[\"但是有一台自己的服务器真的很方便\",{\"1\":{\"3\":1}}],[\"但因其支持面向对象特性\",{\"1\":{\"5\":1}}],[\"但成就感十足\",{\"1\":{\"3\":1}}],[\"但至今为止的关机都是因为折腾导致的\",{\"1\":{\"2\":1}}],[\"但实际上究竟有多长我并没有测试过\",{\"1\":{\"2\":1}}],[\"但我并不推荐all\",{\"1\":{\"84\":1}}],[\"但我的的确确不喜欢闭源的影视服务器\",{\"1\":{\"64\":1}}],[\"但我相信esp32\",{\"1\":{\"2\":1}}],[\"但我热爱探索新的技术\",{\"1\":{\"1\":1}}],[\"但在偶然间\",{\"1\":{\"2\":1}}],[\"大多数rtos代码都具有一定规模\",{\"1\":{\"58\":1}}],[\"大多数人都使用stm32系列芯片作为主控\",{\"1\":{\"2\":1}}],[\"大功告成\",{\"1\":{\"37\":1}}],[\"大部分文字教程都发布于个人博客\",{\"1\":{\"1\":1}}],[\"行深山巨谷中\",{\"1\":{\"1\":1,\"3\":1}}],[\"供后来者参考\",{\"1\":{\"1\":1}}],[\"不会影响未设置网关为旁路由的客户端\",{\"1\":{\"83\":1}}],[\"不会因无意的用户级错误导致对象状态受损\",{\"1\":{\"9\":1}}],[\"不折腾折腾视频服务器\",{\"1\":{\"70\":1}}],[\"不知道现在修复没有\",{\"1\":{\"64\":1}}],[\"不知道是否出于个人原因\",{\"1\":{\"1\":1}}],[\"不将rtos分析透彻\",{\"1\":{\"58\":1}}],[\"不用该函数也可以进行配置\",{\"1\":{\"29\":1}}],[\"不同的时钟源对功耗有所影响\",{\"1\":{\"24\":1}}],[\"不妨尝试一下\",{\"1\":{\"13\":1}}],[\"不相同\",{\"1\":{\"12\":1}}],[\"不愿囿于前人的探索路径\",{\"1\":{\"1\":1}}],[\"我一般还会根据个人需要装一些科学上网的软件包\",{\"1\":{\"91\":1}}],[\"我懒得考虑\",{\"1\":{\"71\":1}}],[\"我还是选择了有核显的cpu\",{\"1\":{\"70\":1}}],[\"我还是一个图吧垃圾佬\",{\"1\":{\"3\":1}}],[\"我这种穷哥们上黑群晖都是为了便宜\",{\"1\":{\"69\":1}}],[\"我时常为折腾而烦恼\",{\"1\":{\"65\":1}}],[\"我希望自己永远不会有这种感觉\",{\"1\":{\"58\":1}}],[\"我们可以先预设\",{\"1\":{\"51\":1}}],[\"我们只需要调用uart库进行收发操作\",{\"1\":{\"48\":1}}],[\"我们使用闹钟提醒我们按时起床\",{\"1\":{\"31\":1}}],[\"我们需要使用gptimer\",{\"1\":{\"29\":1}}],[\"我们就可以让编译器通过函数的传入参数自动区分需要调用的函数\",{\"1\":{\"12\":1}}],[\"我们就可以调用其对外暴露的接口了\",{\"1\":{\"11\":1}}],[\"我们就可以说电视分开了其内部实现和外部接口\",{\"1\":{\"8\":1}}],[\"我们就只需要关心怎么\",{\"1\":{\"11\":1}}],[\"我们就能把注意力从底层逻辑的实现转向模块与模块之间的配合\",{\"1\":{\"11\":1}}],[\"我们无需知道其内部实现原理\",{\"1\":{\"8\":1}}],[\"我们并不知道其如何通过缆线接收信号\",{\"1\":{\"8\":1}}],[\"我也非常喜欢研究计算机网络\",{\"1\":{\"3\":1}}],[\"我也算是积攒了和它们相处的经验\",{\"1\":{\"2\":1}}],[\"我是scaxlibur\",{\"1\":{\"3\":1}}],[\"我接触到了esp32系列\",{\"1\":{\"2\":1}}],[\"我的主要学习方向是嵌入式开发\",{\"1\":{\"2\":1}}],[\"我准备写什么\",{\"0\":{\"2\":1}}],[\"我想这就是我日常的状态\",{\"1\":{\"1\":1}}],[\"我在观看视频教程时容易走神\",{\"1\":{\"1\":1}}],[\"我不喜欢视频教程\",{\"1\":{\"1\":1}}],[\"我喜欢写作\",{\"1\":{\"0\":1}}],[\"此外\",{\"1\":{\"1\":1,\"11\":1,\"15\":1,\"58\":1}}],[\"依附于各种平台的自媒体大行其道\",{\"1\":{\"1\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
